# --------------------------------------------------------------------------------------
# Structs in j-octo work like an alias to registers. We do not explicitly map a name to a register
# but define up to 15 variable names which are assigned automatically to registers v0, v1 and so on.
# Like in other languagues, a struct does not store data in memory locations, the assembly does not really support this.
# however you can save the struct with save and load it with load and you can allocate the memory for it with the .byte command
#
# The goal is to separate functions in a way that they work by themselfs, not even touchting the registers of the caller
# we can do it with save and load however without the help of structs the code may become difficult to read.
#
# The struct itself compiles into the last register, so if we write save Coordinates this will compile into the number of registers
# needed to store. So "save Enemy" compiles into "save vd". If we add or remove variables from a struct, the save comamnds
# and the byte allocations will automatically follow. Also if we modify the order of elements.
#
# Enemy.byte will create as many bytes, as it needs to store the structure. If we modify the members in the struct,
# data and save/load commands will automatically change. With .byte we also can initialize the data structure
#
# So what we get with struct is:
#   - a local alias for registers
#   - automatic store/load

# Store the data of our enemy. We can move as many enemies as we like. Each one has its own data store in memory
# a struct mapps names to registers and simplyfies saving and loading to memory
# the struct name itself returns the last register, "save Enemy" compiles to "save vc"
# the members compile to a register name. "Enemy.x" compiles to v0
# .byte compiles into the number of bytes needed in memory, so Enemy.byte compiles to 13 zeros

:struct Enemy {
              x                                                       # v0 x coordinate
              y                                                       # v1 y coordinate
              dx                                                      # v2 direction x
              dy                                                      # v3 direction y
              minx                                                    # v4 min x
              maxx                                                    # v5 max x
              miny                                                    # v6 min y
              maxy                                                    # v7 max y
              frame                                                   # v8 sprite frame
              maxframe                                                # v9 sprite max frame
              dframe                                                  # va sprite frame direction
              drawx                                                   # vb The draw function uses this as x
              drawy                                                   # vc The draw function uses this as y
              drawframe                                               # vd frame for drawing
              init                                                    # ve 0 = first draw
            }


# Enemy.dx := - Enemy.dx
: enemyReverseX
            vf := 0
            Enemy.dx =- vf
            return

# Enemy.dy := - Enemy.dy
: enemyReverseY
            vf := 0
            Enemy.dy =- vf
            return
# Enemy.dframe := - Enemy.dframe
: enemyReverseFrame
            vf := 0
            Enemy.dframe =- vf
            return

# Advance the coordinates of your enemy, if we reach the bounds, revers the direction
# Advance the frame count, if we reach the lower or upper bound, reverse the direction.

: calcEnemyCoords

            with Enemy {
              drawx := x                                              # save the old coordinates
              drawy := y                                              # and the old frame number
              drawframe := frame                                      # for deletion draw

              if dx != 0 begin                                        # if enemy moves x
                x += dx                                               # modify coordinate
                if x <= minx then enemyReverseX                       # reverse at start
                if x >= maxx then enemyReverseX                       # and end
              end
              if dy != 0 begin                                        # if it moves in y
                y += dy                                               # advance and
                if y <= miny then enemyReverseY                       # reverse at start
                if y >= maxy then enemyReverseY                       # and end
              end
              frame += dframe                                   # go to next/prev frame
              if frame < 0 begin
                enemyReverseFrame                                     # if it was the first frame count forward
                frame += dframe
              end


              if frame >= maxframe begin
                enemyReverseFrame
                frame += dframe
              end
            }
# if it was the last frame, count backwards
            return

# Since there is only one index register and this can not be transfered to regular registers,
# we only can write it as code constant

:macro moveenemy adr drawfn {
              i := adr                                                # load enemy data
              load Enemy
              calcEnemyCoords                                         # move by coordinates
              drawfn                                                  # delete-draw the enemy
              copyEnemyCoords
              drawfn
              i := adr                                                # save data
              save Enemy
            }

: copyEnemyCoords
            Enemy.drawx := Enemy.x                                    # draw the enemy
            Enemy.drawy := Enemy.y                                    # at new
            Enemy.drawframe := Enemy.frame                            # coordinates
            return


:macro drawInitEnemy adr drawfn {
              i := adr                                                # load enemy
              load Enemy
              Enemy.drawx := Enemy.x                                  # draw it at x,y
              Enemy.drawy := Enemy.y
              Enemy.drawframe := Enemy.frame
              drawfn
            }
