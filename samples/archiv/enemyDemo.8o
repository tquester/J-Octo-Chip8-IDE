            jump main
:include "libEnemy.8o"
:include "libTiles.8o"
:include "libText.8o"

# ------------------------------------------------
# -- libPlayer
# ------------------------------------------------

:struct PlayerData {
              x                                                       # v0 Miners x
              y                                                       # v1 Miners y
              x1                                                      # v2 temp x
              y1                                                      # v3 temp y
              xdir1                                                   # v4 the previous direction flag
              xdir                                                    # v5 Direction 1 = right, -1 = left
              jumping                                                 # v7 Jump status
              iPlayer                                                 # v8 miner Frame
              diPlayer                                                # v9 Frame direction
              iPlayer1                                                # va temp iPlayer
              moveFlag                                                # vb
            }

# PlayerTilePos has the same structure as PlayerData for the first 3 variables
# x1 becomes tilex, y1 becomes tiley by dividing the coordinate with the tile size (8)
:struct PlayerTilePos {
              x                                                       # v0 Miners x
              y                                                       # v1 Miners y
              tileX                                                   # v2 temp x
              tileX                                                   # v3 temp y
              collision                                               # v4
            }

: playerData
            PlayerData.byte
: playerSaveData
            PlayerData.byte
: playerTilePos
            PlayerTilePos.byte
: playerInitData
            PlayerData.byte {
              xdir := 1
              x := 0
              y := 20
              jumping := 0
              iPlayer := 0
              diPlayer := 1
            }



: playerTileAddress
            with PlayerData {
              x1 := x
              y1 := y
              x1 += 4
              x1 >>= x1
              x1 >>= x1
              x1 >>= x1
              y1 >>= y1
              y1 >>= y1
              y1 >>= y1
            }
            return

: movePlayer
            with PlayerData {

              i := playerSprite
              if xdir == -1 then i := playerReverseSprite
              i += iPlayer
              x1 := x
              y1 := y
              iPlayer1 := iPlayer
              iPlayer += playerHeight
              if iPlayer == playerHeight * playerFrameCount then iPlayer := 0
              x += xdir
              if x <= playerMinX then x := playerMinX
              if x > playerMaxX then x := playerMaxX
              if jumping == -2 begin
                y += 1
                x -= xdir
                iPlayer := 0
              else
                if jumping > 0 begin
:log "jumping"
                  if jumping <= playerJumpSteps / 2 begin
                    y -= 1
                  else
                    y += 1
                  end
                  jumping += 1
                  if jumping >= playerJumpSteps begin
                    jumping := 0
                  end
                end
              end

              drawPlayer

              x1 := x                                                 # prepare for draw
              y1 := y                                                 # new position
              iPlayer1 := iPlayer
              xdir1 := xdir
              drawPlayer                                              # draw new position
              xdir1 := vf
              PlayerTilePos
              vf := xdir1
            }
            return

# ----------------------------------------------------------------------------------------------
# -- move the player. If it is jumping it will move without any key but can reverse the direction
# -- during a jump.
# -- if the player does not move, there will be no redraw to avoid flicker
# -- returns vf = 1 if the player has had a collision
# ----------------------------------------------------------------------------------------------

: playerProcessKeys
            i := playerSaveData                                       # save Callers Registers
            save PlayerData

            i := playerData
            load PlayerData

            with PlayerData {
              moveFlag := 0                                           # v1 = Flag if miner moved
              xdir1 := xdir                                           # save direction flag
              x1 := 9                                                 # we use x1 as temp variable for keyboard check
              if x1 key begin                                         # left
                xdir := 1
                moveFlag := 1
              end

              x1 := 7
              if x1 key begin                                         # right
                xdir := 0xff
                moveFlag := 1
              end

              if jumping == 0 begin                                   # only start a new jump if not jumping

                x1 := 5
                if x1 key then jumping := 1                           # jump
              end


              if jumping != 0 then moveFlag := 1


              vf := 0
              if moveFlag == 1 begin
                movePlayer                                            # move walking or jumping player
              end
            }
            i := playerData
            save PlayerData
            i := playerSaveData                                       # restore Callers registers
            load PlayerData
            return

: playerInitDraw
            with PlayerData {
              xdir := 1
              jumping := 0
              iPlayer := 0
              x1 := x
              y1 := y
              iPlayer1 := iPlayer
              drawPlayer
              i := playerData
              save PlayerData
            }

            return



: playerCheckJump
            i := playerSaveData
            save PlayerData
            i := playerData
            load PlayerData
            if PlayerData.jumping != 0 then movePlayer
            i := playerSaveData
            load v4
            return
#-------------------------------------------------
# extern


:const playerHeight 15
:const playerFrameCount 5
:const playerMinX 0
:const playerMaxX 116
:const playerJumpSteps 29
:const playerJumpHeight 15

: drawPlayer
            with PlayerData {
              i := playerSprite
              if xdir1 == -1 then i := playerReverseSprite

              i += iPlayer1
#:log "Player at x=" x1 " y=" y1
              sprite x1 y1 15
            }

            return


#--------------------------------------------------



: textbase
: txtCellPhones1  tinytext8 "Attack of mutant#"
: txtCellPhones2  tinytext8 "cell phones!#"
: mariowashere2 tinytext8 "Mario was here!#"                          #
#
#: main
#            Tinytext 10 10 enterTheMine

: main
            hires


# copy 4 the initial coordinate data for all 4 enemies to the data section
            v2 := 0
            for v1 := 0 to 5 * (initEnemyData1 - initEnemyData) begin
              i := initEnemyData                                      # load 14 registers
              i += ve
              load v0
              i := enemydata1                                         # save them
              i += ve
              save v0
              ve += 1
            end

# show the compressed level

            i := mylevel
            DisplayCompressedLevel level1 7



# Display the level title

            Tinytext 10 0 txtCellPhones1
            Tinytext 10 6 txtCellPhones2



# --------------- set player on scene
            i := playerInitData
            load PlayerData
            i := playerData
            PlayerData.y = 25
            playerInitDraw
#drawInitEnemy enemydata1 drawPackman                      # draw initial
#drawInitEnemy enemydata2 drawPackman                      # draw initial
            drawInitEnemy enemydata3 drawBird                         # draw initial
            drawInitEnemy enemydata4 drawHeliBird                     # draw initial
            drawInitEnemy enemydata5 drawCellPhone                    # draw initial

# loop endless
            loop                                                      # forwever
              playerProcessKeys
              if vf == 1 then playerCollision
#moveenemy enemydata1 drawPackman                        # draw initial
#moveenemy enemydata2 drawPackman                        # draw initial
              moveenemy enemydata3 drawBird                           # draw initial
              moveenemy enemydata4 drawHeliBird                       # move enemy2
              moveenemy enemydata5 drawCellPhone                      # move enemy2

            again

# because there is only one I register and we can not save it, each sprite needs a draw routine. this will be passed into the draw macro

: drawPackman
            i := pacman                                               # out sprite
            i += Enemy.drawframe                                      # add frame to sprite
            sprite Enemy.drawx Enemy.drawy 8                          # draw
            return
: drawBird
            i := bird                                                 # out sprite
            i += Enemy.drawframe                                      # add frame to sprite
            sprite Enemy.drawx Enemy.drawy 8                          # draw
            return
: drawHeliBird
            i := helibird                                             # out sprite
            i += Enemy.drawframe                                      # add frame to sprite
            sprite Enemy.drawx Enemy.drawy 8                          # draw
            return

: drawCellPhone
            i := cellphone                                            # out sprite
            i += Enemy.drawframe                                      # add frame to sprite
            sprite Enemy.drawx Enemy.drawy 8                          # draw
            return

: playerCollision
            i := playerData
            load PlayerTilePos

:log "collision at x=" PlayerTilePos.x " y= " PlayerTilePos.y
            return


# ---------------------------------------------------------------------
# -- Initial data for the coordinates and movements of all enemies
# -- because we only have 3.5 kb for code, the data must be compact.
# -- assignments take two byte, the data itself only one byte, so instead
# -- of assigning, lay out the data and copy them to our structures
# ---------------------------------------------------------------------
: initEnemyData
# packman 1
            Enemy.byte {
              x := 20
              y := 5
              dx := 1
              dy := 0
              minx := 10
              maxx := 100
              miny := 5
              maxy := 5
              dframe := 8
              maxframe := 24
            }
: initEnemyData1
# packman 2
            Enemy.byte {
              x := 5
              y := 12
              dx := 0
              dy := 1
              minx := 5
              maxx := 5
              miny := 5
              maxy := 50
              dframe := 8
              maxframe := 24
            }
# the bird
            Enemy.byte {
              x := 20
              y := 50
              dx := 2
              dy := 1
              minx := 5
              maxx := 120
              miny := 5
              maxy := 55
              dframe := 8
              maxframe := 32
            }
# the bird copter
            Enemy.byte {
              x := 10
              y := 30
              dx := 1
              dy := 2
              minx := 5
              maxx := 120
              miny := 5
              maxy := 55
              dframe := 8
              maxframe := 32
            }

# the mutant cell phone
            Enemy.byte {
              x := 20
              y := 24
              dx := 2
              dy := 0
              minx := 5
              maxx := 90
              miny := 5
              maxy := 55
              dframe := 8
              maxframe := (6*8)
            }

: test
# Show tile numbers for the 4 fuel tiles
            TileAtXy mylevel 4 0 2
:log "tile at 0 2 = " + TileDecoder.tilexy

            TileAtXy mylevel 4 0 3
:log "tile at 0 3= " + TileDecoder.tilexy

            TileAtXy mylevel 4 1 2
:log "tile at 1 2 = " + TileDecoder.tilexy

            TileAtXy mylevel 4 1 3
:log "tile at 1 3 = " + TileDecoder.tilexy
# remove the 4 fuel tiles

#  DisplayTile (0*8) (2*8) 7
#  DisplayTile (1*8) (2*8) 8
#  DisplayTile (0*8) (3*8) 9
#  DisplayTile (1*8) (3*8) 10
            return


# ------------------------------------------------------------------------
# work data. We copy the coordinates here and then work with them
# ------------------------------------------------------------------------


: enemydata1 Enemy.byte
: enemydata2 Enemy.byte
: enemydata3 Enemy.byte
: enemydata4 Enemy.byte
: enemydata5 Enemy.byte
: savedata Enemy.byte
: temp
            0x00

# ------------------------------------------------------------------------
# Sprites
# ------------------------------------------------------------------------

# sprite: 8x8

: pacman
# Sprite 1
            0x38 0x7c 0xee 0xfe 0xfe 0x7c 0x38 0x00
# Sprite 3
            0x38 0x7c 0xee 0xfe 0xe0 0x7c 0x38 0x00
# Sprite 4
            0x38 0x7c 0xee 0xfe 0xc0 0x64 0x38 0x00
# Sprite 5
            0x38 0x7c 0xee 0xfe 0xc0 0x64 0x38 0x00
: bird
# Sprite 1
            0x00 0x00 0x02 0xff 0x02 0x00 0x00 0x00
# Sprite 2
            0x00 0x00 0x32 0xff 0x32 0x00 0x00 0x00
# Sprite 3
            0x00 0x30 0x7a 0xff 0x7a 0x30 0x00 0x00
# Sprite 4
            0x30 0x78 0xfa 0xff 0xfa 0x70 0x30 0x00

: helibird
# Sprite 1
            0x00 0x10 0x10 0x7d 0x7f 0x3d 0x3c 0x24
# Sprite 2
            0x00 0x38 0x10 0x7c 0x7f 0x3c 0x3c 0x24
# Sprite 3
            0x00 0x7c 0x10 0x7d 0x7f 0x3d 0x3c 0x24
# Sprite 4
            0x00 0xfe 0x10 0x7c 0x7f 0x3c 0x3c 0x24
# Sprite 5
            0x00 0xfe 0x10 0x7c 0x7f 0x3c 0x3c 0x24#

: cellphone
# Sprite 11
            0x7e 0x7e 0x7e 0x7e 0x7e 0x7e 0x7e 0x7e
# Sprite 12
            0x7e 0x5a 0x7e 0x7e 0x7e 0x7e 0x42 0x7e
# Sprite 13
            0x7e 0x5a 0x5a 0x7e 0x66 0x5a 0x5a 0x7e
# Sprite 14
            0x7e 0x5a 0x66 0x7e 0x66 0x5a 0x5a 0x7e
# Sprite 15
            0x7e 0x5a 0x66 0x7e 0x7e 0x66 0x66 0x7e
# Sprite 16
            0x7e 0x5a 0x66 0x7e 0x42 0x6a 0x6a 0x7e

#end


# sprite: 8x12
: amoebetron0
            0x00 0x00 0x12 0x6D 0xC9 0xF2 0xBC 0xB8 0x58 0x14 0x14 0x24
: amoebetron1
            0x00 0x00 0x00 0x6C 0x49 0x72 0xBC 0xB8 0x58 0x14 0x14 0x24
: amoebetron2
            0x00 0x00 0xC8 0x48 0x48 0x70 0x3C 0x3A 0x58 0x54 0x92 0x10

: toilette
            0x01 0x01 0x01 0x01 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00
            0x04 0x04 0x02 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00
            0x10 0x08 0x04 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00
            0xC0 0x30 0x0C 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00
            0x00 0xE0 0x1C 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00
            0x00 0x00 0xE0 0x1E 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00
            0x00 0x00 0x00 0xFE 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00

: stomper
            0x00 0x38 0x74 0xFE 0xE0 0xE0 0xFE 0x7E 0x28 0x28 0x28 0x7E
            0x00 0x38 0x74 0xFE 0xE0 0xFC 0xFE 0x7E 0x28 0x28 0x7E 0x00
            0x00 0x38 0x74 0xFE 0xF8 0xFC 0xFE 0x7E 0x28 0x7E 0x00 0x00

: robo
            0x38 0x6A 0x7E 0x3E 0x12 0xB8 0xB8 0xFC 0xA0 0xBC 0x38 0x18
            0x38 0x6A 0x7E 0x3E 0x12 0x38 0xB8 0xFC 0xA0 0x3C 0x38 0x18
            0x38 0x6A 0x7E 0x3E 0x12 0x38 0x38 0xFC 0x30 0x3C 0x38 0x18
#end

#tiles: 8x8
: scenesprites

: street
            0xaa 0x55 0xff 0xff 0x00 0x00 0x00 0x00

: streetSolid
            0xff 0xff 0xff 0xff 0x00 0x00 0x00 0x00

: streetChess
            0x55 0xaa 0x55 0xaa 0x00 0x00 0x00 0x00

: door1
            0x00 0x00 0x1f 0x10 0x10 0x10 0x10 0x10

: door2
            0x10 0x1c 0x14 0x10 0x10 0x10 0x10 0x1f
            0x00 0x00 0x00 0x00 0x92 0x54 0x28 0x10
            0x00 0x00 0x00 0x00 0x00 0x00 0xff 0x80
            0x00 0x00 0x00 0x00 0x00 0x00 0xff 0x01
            0xb5 0xa5 0xb5 0xa5 0xa7 0x80 0xff 0x00
            0x69 0x49 0x69 0x49 0x6d 0x01 0xff 0x00
            0x81 0x42 0x24 0x18 0x18 0x24 0x42 0x81
            0x00 0x00 0xc0 0xc2 0xc5 0xfd 0x05 0x02
            0x00 0x00 0x00 0x22 0x22 0x2a 0x2a 0x2a
            0x1f 0x20 0x7f 0x79 0x76 0x7f 0x7e 0x7d
            0xfe 0x06 0xfa 0xfa 0xfa 0x7a 0xfa 0xfa
            0x7d 0x7f 0x7d 0x7f 0x00 0x00 0x00 0x00
            0xfa 0xfa 0xfc 0xf8 0x00 0x00 0x00 0x00

: rocket
            0x01 0x03 0x03 0x07 0x07 0x07 0x07 0x07
            0x00 0x80 0x80 0xc0 0xc0 0xc0 0xc0 0xc0
            0x07 0x07 0x06 0x0c 0x0c 0x18 0x18 0x18
            0xc0 0xc0 0xc0 0x60 0x70 0x30 0x30 0x30
#end




# sprite: 8x15
: playerSprite
            0x06 0x3e 0x7c 0x34 0x3e 0x18 0x3c 0x6e 0x6e 0x6e 0x76 0x3c 0x18 0x18 0x1c
            0x06 0x3e 0x7c 0x34 0x3e 0x18 0x3c 0x7e 0x7e 0xf7 0xfb 0x3c 0x76 0x6e 0x77
            0x06 0x3e 0x7c 0x34 0x3e 0x18 0x3c 0x7e 0x7e 0xf7 0xbb 0x3e 0x66 0xc7 0xe3
            0x06 0x3e 0x7c 0x34 0x3e 0x18 0x3c 0x7e 0x7e 0xf7 0xfb 0x3c 0x76 0x6e 0x77
            0x06 0x3e 0x7c 0x34 0x3e 0x18 0x3c 0x6e 0x6e 0x6e 0x76 0x3c 0x18 0x18 0x1c
: playerReverseSprite
            0x60 0x7c 0x3e 0x2c 0x7c 0x18 0x3c 0x76 0x76 0x76 0x6e 0x3c 0x18 0x18 0x38
            0x60 0x7c 0x3e 0x2c 0x7c 0x18 0x3c 0x7e 0x7e 0xef 0xdf 0x3c 0x6e 0x76 0xee
            0x60 0x7c 0x3e 0x2c 0x7c 0x18 0x3c 0x7e 0x7e 0xef 0xdd 0x7c 0x66 0xe3 0xc7
            0x60 0x7c 0x3e 0x2c 0x7c 0x18 0x3c 0x7e 0x7e 0xef 0xdf 0x3c 0x6e 0x76 0xee
            0x60 0x7c 0x3e 0x2c 0x7c 0x18 0x3c 0x76 0x76 0x76 0x6e 0x3c 0x18 0x18 0x38

#end


# tileset 16x8
: level1

            0xfe 9 0x0e 0x0f 0xfe 5
            0xfe 9 0x10 0x11 0xfe 5
            0xff
            0xfe 15 0x04
            0xfe 5 0x06 0xfe 5 0x06 0x00 0x00 0x00 0x05
            0xfd 16 1
            0xff
            0xff
            0xff
#end

# tileset 16x8
: level2
            0x07 0x08 0xfe 7 0x0c 0xff
            0x09 0x0a 0xff
            0xff
            0x00 0x00 0x06 0xfe 12  0x0c
            0xfd 4 0x01 0x03 0x00 0x00 0xfd 5 0x02 0x00 0x00 0x02 0x02
            0x01 0x02 0x03 0xfe 12 0x04
            0xfe 11 0x06 0xfe 0x03 0x05
            0xfe 11 0xfd 4 1 0x03
# end

# tileset 16x8
: level3
            0xfe 15 0x04
            0xfe 15 0x05
            0xfe 0x0d 0x01 0x01 0x01
            0x01 0x02 0x03 0xff
            0x00 0x00 0x01 0x02 0x03 0xfe 0x09 0x12 0x13
            0xfe 0x04 0x02 0x02 0xfe 0x08 0x14 0x15
            0xfe 7 0x02 0x02 0x00 0x00 0xfd 5 1
            0xff
#end

#tileset 16x8
: level4
            0xff
            0x07 0x08 0xfe 0x08 0x0c 0xfe 0x04 0x04
            0x09 0x0a 0xfe 0x0d 0x05
            0xfe 0x0e 0x01 0x01
            0xfe 0x07 0x03 0xfe 0x03 0xfd 0x05 0x01
            0x01 0x06 0xfe 0x04 0xfd 0x06 0x0b 0xff
            0x00 0x00 0xfd 0x04 0x01 0xff
            0xff
            0xff

#end
