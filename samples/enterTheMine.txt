The goal was to make a game which feels like Manic Miner, Mario and similar jump and rum games from the past. 
The player and the enemies move and change on each step. The player and some enemies remind of Manic Miner, however the sprites a smaller and a bit different.

In order to complete the game, you must find out where and when to jump. Sometimes there are only a few pixels between you and the enemy.

Chip8 has some restrictions, most of all, there is no easy way to tell where the miner has been hit, so there are some technical restrictions: There is never any enemy or other danger at the same colon as a bonus like a key, also the enemies never hit any background pixel so if there is a collision, it is with the player.

Also you have unlimited lives due to memory restrictions.

Compilation
-----------

The game was written in j-octo, my own IDE for chip8 games. j-octo is still in process, be sure to save your files before running. j-octo is litarlly the octo assembly language but with some new elements:
 :struct defines a structure, which is a set of registers with automated save/load to memory
 for..next is the for loop known from Basic
 :if :end for conditional compiling
 :include for including external files 

In order to compile it with a regular octo compiler, you can compile to disassembler, then select octo assembly. The output should now compile. 

ZX Spectrum
------------

In oder to have it flicker free the ZX Spectrum chip8 emulator, I invented 3 new opcodes which work similar to Basic command on ZX81:

 F0E0	- fast
 F0E1	- slow
 F0E2	- redraw

fast turns the emulator into redraw via interrupt but disables the redraw. Slow turns the drawing on again.
redraw draws redraws the screen.

The game runs enirly in fast mode so it can re-arrange all sprites and have screen redrawed after the sprites have a new position. This way, you never will see a sprite disappearing. Also all calculations inside the game run a bit faster because the vsync does nothing.

ZX Chip8 stores the letters Z and X into memory location 0 and 1, only if this is present, the opcodes are present. Otherwise they simply return

Native Code
------------

In order to gain a bit more speed, j-octos disassembler has a Z80 output format. This produces native Z80 assembler, which can be used with the runtime of the ZX Chip8 emulator. Many chip8 commands are compiled into a single Z80 opcode and even the I register is mapped to a real register (iy). 

It should be realtivly easy to run the Z80 compiled Chip8 code on any other Z80 based machine like the Gameboy or Amstrad CPC, only a minimal runtime for sprite drawing, keyboard and interrupt must be implemented.



