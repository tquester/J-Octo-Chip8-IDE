            jump main

# Store the data of our enemy. We can move as many enemies as we like. Each one has its own data store in memory
# a struct mapps names to registers and simplyfies saving and loading to memory
# the struct name itself returns the last register, "save Enemy" compiles to "save vc"
# the members compile to a register name. "Enemy.x" compiles to v0
# .byte compiles into the number of bytes needed in memory, so Enemy.byte compiles to 13 zeros

:struct Enemy {
              x                                                       # v0 x coordinate
              y                                                       # v1 y coordinate
              dx                                                      # v2 direction x
              dy                                                      # v3 direction y
              minx                                                    # v4 min x
              maxx                                                    # v5 max x
              miny                                                    # v6 min y
              maxy                                                    # v7 max y
              frame                                                   # v8 sprite frame
              maxframe                                                # v9 sprite max frame
              dframe                                                  # va sprite frame direction
              drawx                                                   # vc The draw function uses this as x
              drawy                                                   # vd The draw function uses this as y
              drawframe                                               # vc frame for drawing
            }

# Init all variables and store the dataset to the memory

:macro initenemy adr x_ y_ dx_ dy_ minx_ maxx_ miny_ maxy_ dframe_ maxframe_ {
              Enemy.x := x_
              Enemy.y := y_
              Enemy.dx := dx_
              Enemy.dy := dy_
              Enemy.minx := minx_
              Enemy.maxx := maxx_
              Enemy.miny := miny_
              Enemy.maxy := maxy_
              Enemy.maxframe := maxframe_
              Enemy.dframe := dframe_
              Enemy.frame := 0
              i := adr
              save Enemy
            }

# Sub-Routine for Coordinate-calculation

# Enemy.dx := - Enemy.dx
: enemyReverseX
            vf := Enemy.dx
            Enemy.dx := 0
            Enemy.dx -= vf
            return

# Enemy.dy := - Enemy.dy
: enemyReverseY
            vf := Enemy.dy
            Enemy.dy := 0
            Enemy.dy -= vf
            return

: enemyReverseFrame
            vf := Enemy.dframe
            Enemy.dframe := 0
            Enemy.dframe -= vf
            return

: calcEnemyCoords

            Enemy.drawx := Enemy.x                                    # save the old coordinates
            Enemy.drawy := Enemy.y                                    # and the old frame number
            Enemy.drawframe := Enemy.frame                            # for deletion draw

            if Enemy.dx != 0 begin                                    # if enemy moves x
              Enemy.x += Enemy.dx                                     # modify coordinate
              if Enemy.x <= Enemy.minx then enemyReverseX             # reverse at start
              if Enemy.x >= Enemy.maxx then enemyReverseX             # and end
            end
            if Enemy.dy != 0 begin                                    # if it moves in y
              Enemy.y += Enemy.dy                                     # advance and
              if Enemy.y <= Enemy.miny then enemyReverseY             # reverse at start
              if Enemy.y >= Enemy.maxy then enemyReverseY             # and end
            end
            Enemy.frame += Enemy.dframe                               # go to next/prev frame
            if Enemy.frame < 0 then enemyReverseFrame                 # if it was the first frame count forward
            if Enemy.frame >= Enemy.maxframe begin
              enemyReverseFrame
              Enemy.frame += Enemy.dframe
            end
# if it was the last frame, count backwards
            return

# for drawing we need the address and a custom function

:macro moveenemy adr drawfn {
              i := adr                                                # load enemy data
              load Enemy

              calcEnemyCoords                                         # move by coordinates
              drawfn                                                  # delete-draw the enemy
              Enemy.drawx := Enemy.x                                  # draw the enemy
              Enemy.drawy := Enemy.y                                  # at new
              Enemy.drawframe := Enemy.frame                          # coordinates
              drawfn
              i := adr                                                # save data
              save Enemy
            }

:macro drawInitEnemy adr drawfn {
              i := adr                                                # load enemy
              load Enemy
              Enemy.drawx := Enemy.x                                  # draw it at x,y
              Enemy.drawy := Enemy.y
              Enemy.drawframe := Enemy.frame
              drawfn
            }

: main
            hires
            initenemy enemydata1 20 5 1 0 10 100   5 5 8 24
            initenemy enemydata2 5 12 0 1 5 5 5 50 8 24               # second enemy
            initenemy enemydata3 20 50 2 1 5 120   5 55 8 32
            initenemy enemydata4 10 30 1 2 5 120   5 55 8 32

            drawInitEnemy enemydata1 drawPackman                      # draw initital
            drawInitEnemy enemydata2 drawPackman                      # draw initial
            drawInitEnemy enemydata3 drawBird                         # draw initial
            drawInitEnemy enemydata4 drawHeliBird                     # draw initial

            loop                                                      # forwever
              i := savedata                                           # save registers
              save Enemy
              moveenemy enemydata1 drawPackman                        # move enemy1
              moveenemy enemydata2 drawPackman                        # move enemy2
              moveenemy enemydata3 drawBird                           # move enemy2
              moveenemy enemydata4 drawHeliBird                       # move enemy2
              i := savedata                                           # load registers
              load Enemy
              for v0 := 0 to 50 v0 += 0                               # wait some time
            again

: drawPackman
            i := pacman                                               # out sprite
            i += Enemy.drawframe                                      # add frame to sprite
            sprite Enemy.drawx Enemy.drawy 8                          # draw
            return
: drawBird
            i := bird                                                 # out sprite
            i += Enemy.drawframe                                      # add frame to sprite
            sprite Enemy.drawx Enemy.drawy 8                          # draw
            return
: drawHeliBird
            i := helibird                                             # out sprite
            i += Enemy.drawframe                                      # add frame to sprite
            sprite Enemy.drawx Enemy.drawy 8                          # draw
            return


: enemydata1 Enemy.byte
: enemydata2 Enemy.byte
: enemydata3 Enemy.byte
: enemydata4 Enemy.byte

: savedata Enemy.byte




: pacman
# Sprite 1
            0x38 0x7c 0xee 0xfe 0xfe 0x7c 0x38 0x00
# Sprite 3
            0x38 0x7c 0xee 0xfe 0xe0 0x7c 0x38 0x00
# Sprite 4
            0x38 0x7c 0xee 0xfe 0xc0 0x64 0x38 0x00
# Sprite 5
            0x38 0x7c 0xee 0xfe 0xc0 0x64 0x38 0x00
: bird
# Sprite 1
            0x00 0x00 0x02 0xff 0x02 0x00 0x00 0x00
# Sprite 2
            0x00 0x00 0x32 0xff 0x32 0x00 0x00 0x00
# Sprite 3
            0x00 0x30 0x7a 0xff 0x7a 0x30 0x00 0x00
# Sprite 4
            0x30 0x78 0xfa 0xff 0xfa 0x70 0x30 0x00

: helibird
# Sprite 1
            0x00 0x10 0x10 0x7d 0x7f 0x3d 0x3c 0x24
# Sprite 2
            0x00 0x38 0x10 0x7c 0x7f 0x3c 0x3c 0x24
# Sprite 3
            0x00 0x7c 0x10 0x7d 0x7f 0x3d 0x3c 0x24
# Sprite 4
            0x00 0xfe 0x10 0x7c 0x7f 0x3c 0x3c 0x24
# Sprite 5
            0x00 0xfe 0x10 0x7c 0x7f 0x3c 0x3c 0x24

