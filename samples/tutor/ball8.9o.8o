# bouncing ball

:const OCTO_KEY_Q 4
:const OCTO_KEY_W 5
:const OCTO_KEY_E 6
:const OCTO_KEY_R 0xD

:const OCTO_KEY_A 7
:const OCTO_KEY_S 8
:const OCTO_KEY_D 9
:const OCTO_KEY_F 0xE


:struct Balldata {
              ballnr
              x
              y
              dx
              dy
              savex
              savey
            }

:struct Player {
              x
              y
              dx
              dy
              index
            }


            gameLoop

:const numBalls  (ballend - ball1) / Balldata.length

:function gameLoop {
              var Balldata
              var temp
              var ballindex

              hires

              for ballindex = 0 to numBalls - 1 begin
                ballnr = ballindex
                initDrawBall
              end
              initDrawPlayer


              loop
                for ballindex = 0 to numBalls - 1 begin
                  ballnr = ballindex
                  moveBall
                movePlayer
                end
              again
            }

:function initDrawPlayer {
              var Player
              i := player
              load Player
              i := planes
              i += index
              sprite x y 8
              return
            }


:function movePlayer {
              var Player
              var moved
              var savex
              var savey
              var saveindex

              i := data
              save var

              i := player
              load Player
              savex := x
              savey := y
              saveindex := index

              switch key begin
                case OCTO_KEY_A begin
                  if x > 0 begin
                    x -= 1
                    moved := 1
                    index := 3 * 8
                  end
                end
                case OCTO_KEY_D begin
                  if x < 128 - 8 begin
                    x += 1
                    moved := 1
                    index := 2 * 8
                  end
                end
                case OCTO_KEY_W begin
                  if y > 0 begin
                    y -= 1
                    moved := 1
                    index := 0 * 8
                  end
                end
                case OCTO_KEY_S begin
                  if y > 0 begin
                    y += 1
                    moved := 1
                    index := 1 * 8
                  end
                end
              end
              if moved == 1 begin
                i := planes
                i += saveindex
                sprite savex savey 8
                i := planes
                i += index
                sprite x y 8
                i := player
                save Player
              end
              i := data
          #    load var
              return
: data
              var.byte


            }





:function ballCallback {
              var Balldata
              i := ball1[ballnr] using  ve vd
              return
            }




:function initDrawBall {
              var Balldata
              ballCallback
              load Balldata
              i := ball
              sprite x y 8
              return
            }


:function moveBall {
              var Balldata
              var temp
              ballCallback
              load Balldata
              i := ball
              savex := x
              savey := y
              x += dx
              y += dy
              if x < 0 then negx
              if x > 128 - 8 then negx
              if y < 0 then negy
              if y > 64 - 8 then negy
              sprite savex savey 8
              sprite x y 8
              if vf == 1 begin
                sprite x y 8
                negx
                sprite x y 8
              end
              ballCallback
              save Balldata
              return

: negx
              vf := dx
              dx = 0
              dx -= vf
              x += dx
              return

: negy
              vf := dy
              dy = 0
              dy -= vf
              y += dy
              return
            }

: ball1
            Balldata.byte {
              ballnr = 0
              x = 1
              y = 1
              dx = 1
              dy = 2
            }

: ball2
            Balldata.byte {
              ballnr = 1
              x = 30
              y = 1
              dx = -2
              dy = 1
            }

: ball3
            Balldata.byte {
              ballnr = 2
              x = 30
              y = 50
              dx = -2
              dy = 1
            }

: ball4
            Balldata.byte {
              ballnr = 3
              x = 120
              y = 0
              dx = -2
              dy = 1
            }

: ball5
            Balldata.byte {
              ballnr = 4
              x = 20
              y = 80
              dx = -2
              dy = -1
            }

: ball6
            Balldata.byte {
              ballnr = 5
              x = 3
              y = 0
              dx = -2
              dy = -1
            }

: ballend

: player
            Player.byte {
              x = 30
              y = 30
              dx = 0
              dy = 1
              index=0
            }


# Defines the sprite, so that the sprie editor can find it automatically

:sprite ball, 8,8 {
              0x00 0x18 0x3c 0x7e 0x7e 0x3c 0x18 0x00
            }

:sprite planes, 8,8 {
              0x00 0x18 0x7e 0xff 0x18 0x18 0x3c 0x18
              0x00 0x18 0x3c 0x18 0x18 0xff 0x7e 0x18
              0x04 0x06 0x26 0x7f 0x7f 0x26 0x06 0x04
              0x10 0x30 0x32 0x7f 0x7f 0x32 0x30 0x10
            }
