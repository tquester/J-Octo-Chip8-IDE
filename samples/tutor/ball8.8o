# bouncing ball

:struct Balldata {
              ballnr
              x
              y
              dx
              dy
              savex
              savey
            }

            gameLoop

:const numBalls  (ballend - ball1) / Balldata.length

:function gameLoop {
              var Balldata
              var temp
              var ballindex

              hires

              for ballindex = 0 to numBalls - 1 begin
                ballnr = ballindex
                initDrawBall
              end

              loop
                for ballindex = 0 to numBalls - 1 begin
                  ballnr = ballindex
                  moveBall
                  for temp := 0 to 2
                  temp += 0
                end
              again
            }

:function ballCallback {

              var Balldata

:breakpoint
              i := ball1[ballnr] using  ve
              return
            }

:function ballCallback2 {
              var Balldata
              switch ballnr begin
                case 0 i := ball1
                case 1 i := ball2
                case 2 i := ball3
                case 3 i := ball4
                case 4 i := ball5
                case 5 i := ball6
              end
              return
            }


:function initDrawBall {
              var Balldata
              ballCallback
              load Balldata
              i := ball
              sprite x y 8
              return
            }


:function moveBall {
              var Balldata
              var temp
              ballCallback
              load Balldata
              i := ball
              savex := x
              savey := y
              x += dx
              y += dy
              if x < 0 then negx
              if x > 128 - 8 then negx
              if y < 0 then negy
              if y > 64 - 8 then negy
              sprite savex savey 8
              sprite x y 8
              if vf == 1 begin
                sprite x y 8
                negx
                sprite x y 8
              end
              ballCallback
              save Balldata
              return

: negx
              vf := dx
              dx = 0
              dx -= vf
              x += dx
              return

: negy
              vf := dy
              dy = 0
              dy -= vf
              y += dy
              return
            }

: ball1
            Balldata.byte {
              ballnr = 0
              x = 1
              y = 1
              dx = 1
              dy = 2
            }

: ball2
            Balldata.byte {
              ballnr = 1
              x = 30
              y = 1
              dx = -2
              dy = 1
            }

: ball3
            Balldata.byte {
              ballnr = 2
              x = 30
              y = 50
              dx = -2
              dy = 1
            }

: ball4
            Balldata.byte {
              ballnr = 3
              x = 120
              y = 0
              dx = -2
              dy = 1
            }

: ball5
            Balldata.byte {
              ballnr = 4
              x = 20
              y = 80
              dx = -2
              dy = -1
            }

: ball6
            Balldata.byte {
              ballnr = 5
              x = 3
              y = 0
              dx = -2
              dy = -1
            }

: ballend

# Defines the sprite, so that the sprie editor can find it automatically

:sprite ball, 8,8 {
              0x00 0x18 0x3c 0x7e 0x7e 0x3c 0x18 0x00
            }
