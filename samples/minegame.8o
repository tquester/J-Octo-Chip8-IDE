            jump main


:include "libEnemy.8o"
:include "libTilesDecoded.8o"
:include "libText.8o"
:include "libPlayer.8o"
:include "libFast.8o"

# (C) 2023 Thomas Quester, thomas@quester-hh.de
#
# The game uses an object oriented schema. All Enemies, the player and the levels are layed out in memory and
# are loaded into a :struct
# sub routines are generally starting by loading their data from memory and saving them if it got changed
# inside any level loop the PlayerData is loaded but the x/y and moving registers are destroyed

# -------------------------------------------------------------------------------
# -- data for libPlayer
# -------------------------------------------------------------------------------

:const DEBUG 1
:const CHEAT 1
:const playerHeight 15
:const playerFrameCount 5
:const playerMinX 0
:const playerMaxX 116
:const playerJumpSteps 29#

: drawPlayer
            with PlayerData {
              i := playerSprite
              if xdir1 == -1 then i := playerReverseSprite

              i += iPlayer1
              sprite x1 y1 15
            }
            return

:macro copyData source target length {
              for v1 := 0 to length begin
                i := source                                           # load 14 registers
                i += v1
                load v0
                i := target                                           # save them
                i += v1
                save v0
              end

            }
: textbase
: txtAmoebetronsRevance tinytext8 "Amoebetrons revanche!#"
: txtCellPhones1  tinytext8 "Attack of mutant #"
: txtCellPhones2  tinytext8 "cell phones!#"
: mariowashere2 tinytext8 "Mario took the coin!#"
: whereiseugene tinytext8 "Where is Eugene?#"

: welldone tinytext8 "Well done!#"
: welldone2 tinytext8 "You qualify#"
: welldone3 tinytext8 "as a retro-#"
: welldone4 tinytext8 "gamer#"

# ----------------------------------------------------------------------------------------------------------------------------------------
# each tile map has an object data. when the player hits something, we look in the object data for the coordinates, if it is deadly the
# level is re-started, otherwise we do something with the object
# every other object, like a sprite that the player hits, is deadly
# ----------------------------------------------------------------------------------------------------------------------------------------

:struct ObjectData {
              tilex
              tiley
              objtype
            }

# ----------------------------------------------------------------------------------------------------------------------------------------
# printCoords is used in debug, it prints the x/y tile address and the tile und the players feet
# ----------------------------------------------------------------------------------------------------------------------------------------

:if DEBUG
: bcdbuf1 0 0 0
: bcdbuf2 0 0 0
: bcdbuf3 0 0 0
: bcdfirst 1
: printsave 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

: printCoords
            i := printsave
            save vf
            With PlayerTilePos {
              i := bcdfirst
              load v0
              if v0 == 0 then printBcdBuf
              v0 := 0
              i := bcdfirst
              save v0
              i := bcdbuf1
              bcd tilex
              i := bcdbuf2
              bcd tiley
              v0 := tiley


              v1 := tilex
              tileAtV0V1
              i := bcdbuf3
              bcd v0


              printBcdBuf
            }
            i := printsave
            load vf

            return

: printBcdBuf
            v6 := 0
            v5 := 0
            i := bcdbuf1+1
            load v0
            i := hex v0
            sprite v6 v5 5
            v6 += 6
            i := bcdbuf1+2
            load v0
            i := hex v0
            sprite v6 v5 5
            v6 += 20
            i := bcdbuf2+1
            load v0
            i := hex v0
            sprite v6 v5 5
            v6 += 6
            i := bcdbuf2+2
            load v0
            i := hex v0
            sprite v6 v5 5

            v6 += 20
            i := bcdbuf3+1
            load v0
            i := hex v0
            sprite v6 v5 5
            v6 += 6
            i := bcdbuf3+2
            load v0
            i := hex v0
            sprite v6 v5 5


            return
:end






: drawAmoebetron
            i := amoebetron0                                          # out sprite
            jump drawSprite12


: drawToilette
            i := toilette                                             # out sprite
: drawSprite12
            i += Enemy.drawframe                                      # add frame to sprite
            sprite Enemy.drawx Enemy.drawy 12                         # draw
            return

: drawStomper
            i := stomper                                              # out sprite
            jump drawSprite12

: drawRobo
            i := robo                                                 # out sprite
            jump drawSprite12

: drawCellphone
            i := cellphone                                            # out sprite
            jump drawSprite12


#
#: main
#            Tinytext 10 10 enterTheMine

: checkFalling


            v0 := PlayerTilePos.tiley
            v1 := PlayerTilePos.tilex
            tileAtV0V1
            if v0 == 0 begin
              if PlayerData.jumping == 0 begin
                loadPlayerData
                PlayerData.jumping = -2
                savePlayerData
              end
            else
              if v0 < 6 begin
                if PlayerData.jumping < 0 begin
                  loadPlayerData
                  PlayerData.jumping = 0
                  savePlayerData
                end
              end
            end
            vf := 0
            if PlayerTilePos.tiley > 7 then
            vf := 1
            return


: main
            hires

            initfast
            fast
# ----------------------------------------------------------------------------------------------------------------------------------------
# checks if player is falling. Is there a tile under the feet?
# if no tile under the feet, we set the jumping-mode to -2 (falling)
# if the player is jumping or falling and there is a tile under the feet, we set the player to moving (0)
# warning: destroys v0 and v1
# ----------------------------------------------------------------------------------------------------------------------------------------



# ----------------------------------------------------------------------------------------------------------------------------------------
# -- Scene 1: The revanche of the amoebetrons
# ----------------------------------------------------------------------------------------------------------------------------------------

: scene1
            clear
:if DEBUG
            v0 := 1
            i := bcdfirst
            save v0
:end
            copyData scene1SpriteData enemydata1 ((initEnemyData1 - initEnemyData)*2)
            DisplayCompressedLevel level1 8
            Tinytext 10 58 txtAmoebetronsRevance
            i := playerInitData
            load PlayerData
            PlayerData.y = 25
            playerInitDraw
            drawInitEnemy enemydata1 drawAmoebetron                   # draw initial
            drawInitEnemy enemydata2 drawAmoebetron                   # draw initial
            loop                                                      # forwever
:if CHEAT
              v0 := 1
              if v0 key then jump scene2
              v0 := 2
              if v0 key then jump scene3
              v0 := 3
              if v0 key then jump scene4
:end
              playerProcessKeys

              PlayerTilePos.collision := vf

              if PlayerTilePos.moveFlag == 1 begin
                checkFalling

:if DEBUG
                printCoords
:end
                if PlayerTilePos.collision == 1 begin
                  i := level1Objects
                  checkCollision
                  if v0 == mario begin
                    Tinytext 0 5 mariowashere2
                    jump scene1cont
                  end
                  if v0 == door then jump scene2
                  jump scene1
                end
              end

: scene1cont
              moveenemy enemydata1 drawAmoebetron                     # draw initial
              moveenemy enemydata2 drawAmoebetron                     # move enemy2
              redraw

            again

# because there is only one I register and we can not save it, each sprite needs a draw routine. this will be passed into the draw macro

# --------------------------------------------------------------------------------------------
# -- Scene 2: Where is Eugene
# --------------------------------------------------------------------------------------------


: fuelflag 1
: key1flag 1
: key2flag 1

:macro getAndResetFlag adr {
              i := adr
              load v0
              vf := v0
              i := adr
              v0 := 0
              save v0
            }





: scene2
            clear
            v0 := 1
            v1 := 1
            v2 := 1
            i := fuelflag
            save v3
            clear


:if DEBUG
            v0 := 1
            i := bcdfirst
            save v0
:end
            ve := 1                                                   # fuel flag


            copyData scene2SpriteData enemydata1 ((initEnemyData1 - initEnemyData)*2)
            DisplayCompressedLevel level2 8
            Tinytext 0 58 whereiseugene
            i := playerInitData
            load PlayerData
# i := playerData
            PlayerData.y = 16
            playerInitDraw
            drawInitEnemy enemydata1 drawToilette                     # draw initial
            drawInitEnemy enemydata2 drawToilette                     # draw initial

# loop endless
            loop                                                      # forwever
              playerProcessKeys
              PlayerTilePos.collision := vf

              if PlayerTilePos.moveFlag == 1 begin
                checkFalling
#               if vf == 1 then jump scene2

:if DEBUG
                printCoords
:end
                if PlayerTilePos.collision == 1 begin
                  i := level2Objects
                  checkCollision
                  if v0 == fuel begin
                    getAndResetFlag fuelflag
                    if vf == 1 begin
                      DisplayTile (0*8) (0*8) 7
                      DisplayTile (1*8) (0*8) 8
                      DisplayTile (0*8) (1*8) 9
                      DisplayTile (1*8) (1*8) 10
                    end
                    jump scene2cont

                  end


                  if v0 == key1 begin
                    getAndResetFlag key1flag
                    if vf == 1 begin
                      DisplayTile (9*8) (0*8) 0x0c
                    end
                    jump scene2cont
                  end
                  if v0 == key2 begin
                    getAndResetFlag key2flag
                    if vf == 1 begin
                      DisplayTile (15*8) (3*8) 0x0c
                    end
                    jump scene2cont
                  end
                  if v0 == door then jump scene3
:if DEBUG
                  jump scene2cont
:end

                  jump scene2
                end
              end
: scene2cont
              moveenemy enemydata1 drawToilette                       # draw initial
              moveenemy enemydata2 drawToilette                       # move enemy2
              redraw

            again

# --------------------------------------------------------------------------------------------
# -- Scene 3: The rocket
# --------------------------------------------------------------------------------------------

: scene3
            clear
:if DEBUG
            v0 := 1
            i := bcdfirst
            save v0
:end

            copyData scene3SpriteData enemydata1 ((initEnemyData1 - initEnemyData)*2)
            DisplayCompressedLevel level3 8
            Tinytext 0 52 txtCellPhones1
            Tinytext 0 58 txtCellPhones2
            i := playerInitData

            load PlayerData
# i := playerData
            PlayerData.y = 9
            playerInitDraw
            drawInitEnemy enemydata1 drawStomper                      # draw initial
            drawInitEnemy enemydata2 drawRobo                         # draw initial

# loop endless
            loop                                                      # forwever
              playerProcessKeys
              PlayerTilePos.collision := vf
              if PlayerTilePos.tiley == 8 then jump scene3
              if PlayerTilePos.moveFlag == 1 begin
                checkFalling
:if DEBUG
                printCoords
:end
                if PlayerTilePos.tilex < 6 then jump scene3cont


                if PlayerTilePos.collision == 1 begin
                  i := level3Objects
                  checkCollision
:log "collision object=" v0 " tilex=" PlayerTilePos.tilex " tiley=" PlayerTilePos.tiley
                  if v0 == rocket then jump rocketHit

                  if v0 == door then jump scene4
                  jump scene3
                end
              end
: scene3cont


              moveenemy enemydata1 drawStomper                        # draw initial
              moveenemy enemydata2 drawRobo                           # move enemy2
              redraw

            again
: rocketHit

            i := playerData
            load PlayerData

            with PlayerData {
              x1 := x
              y1 := y
              iPlayer1 := iPlayer
              drawPlayer
            }


            DisplayTile (14*8) (4*8) 0x12
            DisplayTile (15*8) (4*8) 0x13
            DisplayTile (14*8) (5*8) 0x14
            DisplayTile (15*8) (5*8) 0x15


            v4 := 8
            for v3 := 0 to 30 begin
              drawRocket
              for v5 := 0 to 30 v5 += 0
              drawRocket
            end
            i := playerData
            load PlayerData
            PlayerData.x := 13*8
            PlayerData.y := 0*8+1
            i := playerData
            savePlayerData
            playerInitDraw
            jump scene3cont

: drawRocket
            v4 := 8
            i := scenesprites + 0x11 * 8
            v1 := 14 * 8
            v2 := 4 * 8
            v2 -= v3
            sprite v1 v2 8
            v1 += 8
            i += v4
            sprite v1 v2 8
            v1 -= 8
            v2 += 8
            i += v4
            sprite v1 v2 8
            v1 += 8
            i += v4
            sprite v1 v2 8
            return

# --------------------------------------------------------------------------------------------
# -- Scene 4: Attack of the mutant cell phones
# --------------------------------------------------------------------------------------------

: scene4
            clear
:if DEBUG
            v0 := 1
            i := bcdfirst
            save v0
:end

            copyData scene4SpriteData enemydata1 ((initEnemyData1 - initEnemyData)*2)
            DisplayCompressedLevel level4 8
            Tinytext 0 52 txtCellPhones1
            Tinytext 0 58 txtCellPhones2
            i := playerInitData
            load PlayerData
# i := playerData
            PlayerData.y = 25
            playerInitDraw
            drawInitEnemy enemydata1 drawCellphone                    # draw initial
            drawInitEnemy enemydata2 drawCellphone                    # draw initial

# loop endless
            loop                                                      # forwever
              playerProcessKeys
              PlayerTilePos.collision := vf
              loadPlayerData
              if PlayerTilePos.moveFlag == 1 begin
                checkFalling
:if DEBUG
                printCoords
:end
                if PlayerTilePos.collision == 1 begin
                  i := level4Objects
                  checkCollision
                  if v0 == door then jump endofgame
                  jump scene4

                end
              end
: scene1cont
              moveenemy enemydata1 drawCellphone                      # draw initial
              moveenemy enemydata2 drawCellphone                      # move enemy2
              redraw
            again

: checkCollision
# assume that i is advanced on load!

            loop
              load ObjectData
              if ObjectData.tilex == 0xff then return
              if ObjectData.tilex == PlayerTilePos.tilex begin
                if ObjectData.tiley == PlayerTilePos.tiley begin
                  v0 := ObjectData.objtype
                  return
                end
              end
            again

: endofgame
            clear
            Tinytext 0 10 welldone
            Tinytext 0 18 welldone2
            Tinytext 0 26 welldone3
            Tinytext 0 34 welldone4
            v0 := key
            jump screen1








# ---------------------------------------------------------------------
# -- Initial data for the coordinates and movements of all enemies
# -- because we only have 3.5 kb for code, the data must be compact.
# -- assignments take two byte, the data itself only one byte, so instead
# -- of assigning, lay out the data and copy them to our structures
# ---------------------------------------------------------------------
: initEnemyData

: scene1SpriteData
            Enemy.byte {
              x := 48
              y := 15
              miny := 40
              maxy := 4
              dy := 1
              maxframe := (3*12)
              dframe := 12
            }
: initEnemyData1
            Enemy.byte {
              x := 96
              y := 0x08
              maxy := 40
              miny := 1
              dy := 1
              maxframe := (3*12)
              dframe := 12
            }

: scene2SpriteData
            Enemy.byte {
              x := 45
              y := 20
              miny := 9
              maxy := 30
              minx := 35
              maxx := 70
              dx := 1

              maxframe := (6*12)
              dframe := 12
            }

            Enemy.byte {
              x := 96
              y := 8
              miny := 8
              maxy := 40
              minx := 0
              maxx := 127
              dy := 1
              maxframe := (6*12)
              dframe := 12
            }

: scene3SpriteData
            Enemy.byte {
              x := 69
              y := 37
              miny := 9
              maxy := 38
              minx := 64
              maxx := 96
              dx := 1

              maxframe := (3*12)
              dframe := 12
            }

            Enemy.byte {
              x := 48
              y := 10
              miny := 8
              maxy := 40
              minx := 0
              maxx := 128
              dy := 1
              maxframe := (3*12)
              dframe := 12
            }


: scene4SpriteData
            Enemy.byte {
              x := 90
              y := 10
              miny := 1
              maxy := 25
              minx := 68
              maxx := 110
              dx := 1
              dy := 1
              maxframe := (3*12)
              dframe := 12
            }

            Enemy.byte {
              x := 30
              y := 5
              miny := 0
              maxy := 21
              minx := 6
              maxx := 50
              dy := 1
              dx := 1
              maxframe := (3*12)
              dframe := 12
            }


# ------------------------------------------------------------------------
# work data. We copy the coordinates here and then work with them
# ------------------------------------------------------------------------


: enemydata1 Enemy.byte
: enemydata2 Enemy.byte

: savedata Enemy.byte
: temp
            0x00

# ------------------------------------------------------------------------
# Sprites
# ------------------------------------------------------------------------



#end


# sprite: 8x12
: amoebetron0
            0x00 0x00 0x12 0x6D 0xC9 0xF2 0xBC 0xB8 0x58 0x14 0x14 0x24
: amoebetron1
            0x00 0x00 0x00 0x6C 0x49 0x72 0xBC 0xB8 0x58 0x14 0x14 0x24
: amoebetron2
            0x00 0x00 0xC8 0x48 0x48 0x70 0x3C 0x3A 0x58 0x54 0x92 0x10

: toilette
            0x01 0x01 0x01 0x01 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00
            0x04 0x04 0x02 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00
            0x10 0x08 0x04 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00
            0xC0 0x30 0x0C 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00
            0x00 0xE0 0x1C 0x02 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00
            0x00 0x00 0xE0 0x1E 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00
            0x00 0x00 0x00 0xFE 0xFD 0xFF 0xFC 0x76 0x79 0x39 0x39 0x00

: stomper
            0x00 0x38 0x74 0xFE 0xE0 0xE0 0xFE 0x7E 0x28 0x28 0x28 0x7E
            0x00 0x38 0x74 0xFE 0xE0 0xFC 0xFE 0x7E 0x28 0x28 0x7E 0x00
            0x00 0x38 0x74 0xFE 0xF8 0xFC 0xFE 0x7E 0x28 0x7E 0x00 0x00

: robo
            0x38 0x6A 0x7E 0x3E 0x12 0xB8 0xB8 0xFC 0xA0 0xBC 0x38 0x18
            0x38 0x6A 0x7E 0x3E 0x12 0x38 0xB8 0xFC 0xA0 0x3C 0x38 0x18
            0x38 0x6A 0x7E 0x3E 0x12 0x38 0x38 0xFC 0x30 0x3C 0x38 0x18

: cellphone
# Sprite 1
            0x04 0x3e 0x41 0x55 0x41 0x41 0x5d 0x41 0x41 0x41 0x41 0x3e
# Sprite 2
            0x04 0x3e 0x41 0x55 0x41 0x49 0x55 0x41 0x41 0x41 0x41 0x3e
# Sprite 3
            0x04 0x3e 0x55 0x55 0x41 0x49 0x55 0x55 0x41 0x41 0x41 0x3e
# Sprite 4
            0x04 0x3e 0x4b 0x55 0x41 0x5d 0x55 0x55 0x5d 0x41 0x41 0x3e
# Sprite 5
            0x04 0x3e 0x4b 0x55 0x41 0x5d 0x5d 0x5d 0x5d 0x41 0x41 0x3e

: antenna
#            0x00 0x78 0x3c 0x06 0x06 0x06 0x0c 0x78 0x18 0x18 0x3c 0x7e
#            0x00 0x38 0x3c 0x0c 0x0c 0x0c 0x0c 0x38 0x18 0x18 0x3c 0x7e
#            0x00 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x3c 0x7e
#            0x00 0x1c 0x3c 0x30 0x30 0x30 0x30 0x1c 0x18 0x18 0x3c 0x7e
#            0x00 0x1e 0x3c 0x60 0x60 0x60 0x30 0x1e 0x18 0x18 0x3c 0x7e
#            0x00 0x1c 0x3c 0x30 0x30 0x30 0x30 0x1c 0x18 0x18 0x3c 0x7e
#            0x00 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x3c 0x7e




#tiles: 8x8
: scenesprites

: street
            0xaa 0x55 0xff 0xff 0x00 0x00 0x00 0x00

: streetSolid
            0xff 0xff 0xff 0xff 0x00 0x00 0x00 0x00

: streetChess
            0x55 0xaa 0x55 0xaa 0x00 0x00 0x00 0x00

: door1
            0x00 0x00 0x1f 0x10 0x10 0x10 0x10 0x10

: door2
            0x10 0x1c 0x14 0x10 0x10 0x10 0x10 0x1f
            0x00 0x00 0x00 0x00 0x92 0x54 0x28 0x10
            0x00 0x00 0x00 0x00 0x00 0x00 0xff 0x80
            0x00 0x00 0x00 0x00 0x00 0x00 0xff 0x01
            0xb5 0xa5 0xb5 0xa5 0xa7 0x80 0xff 0x00
            0x69 0x49 0x69 0x49 0x6d 0x01 0xff 0x00
            0x81 0x42 0x24 0x18 0x18 0x24 0x42 0x81
            0x00 0x00 0x00 0xa2 0xe5 0xfd 0x05 0x02
            0x00 0x00 0x00 0x22 0x22 0x2a 0x2a 0x2a
            0x1f 0x20 0x7f 0x79 0x76 0x7f 0x7e 0x7d
            0xfe 0x06 0xfa 0xfa 0xfa 0x7a 0xfa 0xfa
            0x7d 0x7f 0x7d 0x7f 0x00 0x00 0x00 0x00
            0xfa 0xfa 0xfc 0xf8 0x00 0x00 0x00 0x00

: rocket
            0x01 0x03 0x03 0x07 0x07 0x07 0x07 0x07
            0x00 0x80 0x80 0xc0 0xc0 0xc0 0xc0 0xc0
            0x07 0x07 0x06 0x0c 0x0c 0x18 0x18 0x18
            0xc0 0xc0 0xc0 0x60 0x70 0x30 0x30 0x30
#end




# sprite: 8x15
: playerSprite
            0x06 0x3e 0x7c 0x34 0x3e 0x18 0x3c 0x6e 0x6e 0x6e 0x76 0x3c 0x18 0x18 0x1c
            0x06 0x3e 0x7c 0x34 0x3e 0x18 0x3c 0x7e 0x7e 0xf7 0xfb 0x3c 0x76 0x6e 0x77
            0x06 0x3e 0x7c 0x34 0x3e 0x18 0x3c 0x7e 0x7e 0xf7 0xbb 0x3e 0x66 0xc7 0xe3
            0x06 0x3e 0x7c 0x34 0x3e 0x18 0x3c 0x7e 0x7e 0xf7 0xfb 0x3c 0x76 0x6e 0x77
            0x06 0x3e 0x7c 0x34 0x3e 0x18 0x3c 0x6e 0x6e 0x6e 0x76 0x3c 0x18 0x18 0x1c
: playerReverseSprite
            0x60 0x7c 0x3e 0x2c 0x7c 0x18 0x3c 0x76 0x76 0x76 0x6e 0x3c 0x18 0x18 0x38
            0x60 0x7c 0x3e 0x2c 0x7c 0x18 0x3c 0x7e 0x7e 0xef 0xdf 0x3c 0x6e 0x76 0xee
            0x60 0x7c 0x3e 0x2c 0x7c 0x18 0x3c 0x7e 0x7e 0xef 0xdd 0x7c 0x66 0xe3 0xc7
            0x60 0x7c 0x3e 0x2c 0x7c 0x18 0x3c 0x7e 0x7e 0xef 0xdf 0x3c 0x6e 0x76 0xee
            0x60 0x7c 0x3e 0x2c 0x7c 0x18 0x3c 0x76 0x76 0x76 0x6e 0x3c 0x18 0x18 0x38

#end


# tileset 16x8
: level1x

            0xfe 0x09 0x0e 0x0f 0xff
            0xfe 0x09 0x10 0x11 0xff
            0xff
            0xfe 0x0f 0x04
            0xfe 0x05 0x06 0xfe 0x05 0x06 0xfe 0x03 0x05
            0xfd 0x06 0x01 0x00 0xfd 0x04 0x01 0x01 0x00 0x01 0x01 0x01
            0xff
            0xff
            0xff
#end

#tileset 16x8
: level1
#tileset 16x8
            0xfe 0x09 0x0e 0x0f 0xff
            0xfe 0x09 0x10 0x11 0xff
            0xff
            0xfe 0x0f 0x04
            0xfe 0x03 0x06 0xfe 0x05 0x06 0xfe 0x05 0x05
            0x01 0x01 0x01 0x01 0x00 0x01 0x00 0x01 0x01 0x01 0x00 0x01 0x00 0x01 0x01 0x01
            0xff
            0xff
            0xff
#end

#tileset 16x8
: level1c
            0xfe 0x03 0x0b 0xfe 0x05 0x0e 0x0f 0xff
            0xfe 0x09 0x10 0x11 0xff
            0xff
            0xfe 0x0f 0x04
            0xfe 0x03 0x06 0xfe 0x05 0x06 0xfe 0x05 0x05
            0xfd 0x04 0x01 0xfd 0x05 0x01 0x01 0x01 0x01 0x01
            0xff
            0xff
            0xff
#end


:const deadly 0
:const door 1
:const mario 2
:const key1 3
:const key2 4
:const fuel 5
:const way 6
:const rocket 7

: level1Objects
            5 5 deadly
            6 5 deadly
            15 5 door
            9 3 mario
            9 5 mario
            10 3 mario
            10 5 deadly
            11 5 deadly

            0xff 0xff 0xff

: level2Objects
            0 3 fuel
            1 3 fuel
            14 4 key2
            15 4 key2
            9 2 key1
            15 7 door
            15 6 door
            0xff 0xff 0xff

: level3Objects
            14 6 rocket
            14 5 rocket
            14 2 door
            15 2 door
            0xff 0xff 0xff

: level4Objects
            15 5 door
            15 4 door
            0xff 0xff 0xff

# tileset 16x8
: level2
            0x07 0x08 0xfe 7 0x0c 0xff
            0x09 0x0a 0xff
            0xff
            0x00 0x00 0x06 0xfe 12  0x0c
            0xfd 4 0x01 0x03 0x00 0x00 0xfd 5 0x02 0x00 0x00 0x02 0x02
            0x01 0x02 0x03 0xfe 12 0x04
            0xfe 11 0x06 0xfe 0x03 0x05
            0xfe 11 0xfd 4 1 0x03
# end

# tileset 16x8
: level3
            0xfe 15 0x04
            0xfe 15 0x05
            0xfe 0x0d 0x01 0x01 0x01
            0x01 0x02 0x03 0xff
            0x00 0x00 0x01 0x02 0x03 0xfe 0x09 0x12 0x13
            0xfe 0x04 0x02 0x02 0xfe 0x08 0x14 0x15
            0xfe 7 0x02 0x02 0x00 0x00 0xfd 5 1
            0xff
#end

#tileset 16x8
: level4
            0xff
            0xff
            0xff
            0xfe 15 4
            0xfe 8 0x06 0xfe 6 5
            0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01  0x01 0x01 0x01 0x01 0x01 0x01
            0xff
            0xff
            0xff


#end
