
# Structure for
#   a) decompressing a tileset to uncompressed tileset
#   b) displaying a compressed tileset
#   c) finding the tile at x/y
:struct TileDecoder {
              dataByte
              line                                                    # v1 line
              byteInLine                                              # v2 byte in line (not used while showing compressed tiles)
              source                                                  # v3 source offset (to compressed or uncompressed tile set)
              dest                                                    # v4 dest offset to uncompressed tile set
              count                                                   # v5 used in decompressing 0xfd, number of tiles
              x                                                       # v6 x coordinate (while displaying compressed tile set)
              y                                                       # v7  y coordinate (while displaying compressed tile set)
              tile                                                    # v8  tile (used in decoding 0xfd)
              displayX                                                # v9 -1 if we display all or the tile to be displayed
              displayY                                                # va tile to be displyed if
              tilexy                                                  # vb Tile found at x/y
            }


: decompressLevelStart
            with TileDecoder {
              line := 0
              byteInLine := 0
              source := 0
              dest := 0
              x := 0
              y := 0
              tilexy := 0xff
            }
            return
: v0x16
            v0 += v0
: v0x8
            v0 += v0
: v0x4
            v0 += v0
            v0 += v0
            return

# ----------------------------------------------------------------------------------------------
# -- Display a run level compressed level
# -- input: leveladr: level tileset (compressed)
# --        numLines: Number of lines to display (0..7)
# ----------------------------------------------------------------------------------------------


:macro DisplayCompressedLevel leveladr numLines {
              TileDecoder.displayX = 0xff
              decompressLevelStart
              loop
                while TileDecoder.line != numLines
                i := leveladr
                displayCompressedByte
              again
            }

:macro DisplayTile tilex tiley tile {
              v1 := tilex
              v2 := tiley
              v0 := tile
              displayTileSub
            }

: displayTileSub
            v0 -= 1
            v0x8
            i := scenesprites
            i += v0
            sprite v1 v2 8
            return


# ----------------------------------------------------------------------------------------------
# -- Display (or hide) a single tile run level compressed level
# -- input: leveladr: level tileset (compressed)
# --        numLines: Number of lines to display (0..7)
# --        tileX: column of tile to display
# --        tileY: row of tile to display
# ----------------------------------------------------------------------------------------------

:macro DisplayCompressedTile leveladr numLines tileX tileY {
              TileDecoder.displayX = tileX
              TileDecoder.displayY = tileY
              decompressLevelStart
              loop
                while TileDecoder.line != numLines
                i := leveladr
                displayCompressedByte
                if TileDecoder.tilexy == 0xff then
              again
            }

# ----------------------------------------------------------------------------------------------
# -- Find a tile in compressed level
# -- input: leveladr: level tileset (compressed)
# --        numLines: Number of lines to display (0..7)
# --        tileX: column of tile to display
# --        tileY: row of tile to display
# -- output:
#           TileDecoder.tilexy = Found tile
# ----------------------------------------------------------------------------------------------

:macro TileAtXy leveladr numLines tileX tileY {
              TileDecoder.displayX = tileX
              TileDecoder.displayY = tileY
              decompressLevelStart
              loop
                while TileDecoder.line != numLines
                i := leveladr
                searchCompressedByte
                if TileDecoder.tilexy == 0xff then
              again
            }

: searchCompressedByte
            with TileDecoder {
              i += source
              load v0
              source += 1
              if v0 == 0xff begin                                     # 0xff nothing to draw until end of line
                line += 1                                             # advance the line
                byteInLine := 0
                return
              end
              if v0 == 0xfe begin                                     # n bytes are 0
                load v0                                               # load count
                source += 1
                byteInLine += v0
                displayCompressedByteCheckLine
                return
              end
              if v0 == 0xfd begin
                load v0                                               # load count
                count := v0
                load v0
                source += 2
                loop
                  while count != 0
                  searchTile
                  count -= 1
                again
                return
              end
              searchTile
            }
            return

: searchTile
            with TileDecoder {
              if byteInLine != displayX then jump searchTileSkip
              if line != displayY then jump searchTileSkip
              tilexy := v0
: searchTileSkip
              byteInLine += 1
              if byteInLine == 17 begin
                byteInLine := 0
                line += 1
              end
            }
            return


: displayCompressedByte
            with TileDecoder {
              i += source
              load v0
              source += 1
              if v0 == 0xff begin                                     # 0xff nothing to draw until end of line
                line += 1                                             # advance the line
                x := 0                                                # set position 0
                y += 8
                byteInLine := 0
                return
              end
              if v0 == 0xfe begin                                     # n bytes are 0
                load v0                                               # load count
                source += 1
                byteInLine += v0
                v0x8                                                  # multiply by 8
                x += v0                                               # 0xfe always is in the same line
                displayCompressedByteCheckLine
                return
              end
              if v0 == 0xfd begin
                load v0                                               # load count
                count := v0
                load v0
                source += 2
                v0 -= 1
                v0x8
                loop
                  while count != 0
                  drawTile
                  count -= 1
                again
                return
              end
              if v0 != 0 begin
                v0 -= 1
                v0x8
                drawTile
              else
                x += 8

              end
              displayCompressedByteCheckLine


            }
            return




: displayCompressedByteCheckLine
            with TileDecoder {
              if x >= 128 begin
                byteInLine := 0
                x := 0
                y += 8
                line += 1
              end
            }
            return
: drawTile
            with TileDecoder {
              i := scenesprites
              i += v0
              if displayX == 0xff then jump drawTileDraw
              if byteInLine != displayX then jump drawTileSkip
              if line != displayY then jump drawTileSkip
              tilexy := 1
: drawTileDraw
              sprite x TileDecoder.y 8
: drawTileSkip
              x += 8
              byteInLine += 1
              displayCompressedByteCheckLine
            }
            return
