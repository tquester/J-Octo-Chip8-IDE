            jump main

# Structure for
#   a) decompressing a tileset to uncompressed tileset
#   b) displaying a compressed tileset
#   c) finding the tile at x/y
:struct TileDecoder {
              dataByte
              line                                                    # v1 line
              byteInLine                                              # v2 byte in line (not used while showing compressed tiles)
              source                                                  # v3 source offset (to compressed or uncompressed tile set)
              dest                                                    # v4 dest offset to uncompressed tile set
              count                                                   # v5 used in decompressing 0xfd, number of tiles
              x                                                       # v6 x coordinate (while displaying compressed tile set)
              y                                                       # v7  y coordinate (while displaying compressed tile set)
              tile                                                    # v8  tile (used in decoding 0xfd)
              displayX                                                # v9 -1 if we display all or the tile to be displayed
              displayY                                                # va tile to be displyed if
              tilexy                                                  # vb Tile found at x/y


            }

:struct TileDisplayStruct {
              dataByte
              x
              y
              source
              nextLine
            }

: v0x16
            v0 += v0
: v0x8
            v0 += v0
: v0x4
            v0 += v0
            v0 += v0
            return

: startDisplayLevel
            with TileDisplayStruct {
              x := 0
              y := 0
              source := 0
              nextLine := 15
            }
            return

: displayLevelTile
            with TileDisplayStruct {
:log "Display sprite " v0 " at " x ", " y
              i += source
              load dataByte
              if dataByte != 0 begin
                dataByte -= 1
                v0x8
                i := scenesprites
                i += dataByte
                sprite x y 8
              end
              x += 8
              if source == nextLine begin
                nextLine += 16
                x := 0
                y += 8
              end
              source += 1
            }
            return


: displayLevel
            startDisplayLevel
            loop
              if TileDecoder.source == 64 then return
              i := levelData
              displayLevelTile
            again
            return

: decompressLevelStart
            with TileDecoder {
              line := 0
              byteInLine := 0
              source := 0
              dest := 0
			  x := 0
			  y := 0
			  tilexy := 0
            }
            return

: decompressByteCheckNewLine
            if TileDecoder.byteInLine == 16 begin
              TileDecoder.byteInLine := 0
              TileDecoder.line += 1
            end
            return

: decompressByteWrite
            i := levelData
            i += TileDecoder.dest
            save v0
            TileDecoder.dest += 1
            TileDecoder.byteInLine += 1
            return

: decompressCopyBytes
            loop
              if TileDecoder.count == 0 then return
              decompressByteWrite
              decompressByteCheckNewLine
              TileDecoder.count -= 1
            again



: decompressLevelByte
            with TileDecoder {
              i +=  source
              load v0
:log "decoding byte " source " = " v0 " line = " line " dest= " dest

              source += 1

              if v0 == 0xff begin                                     # 0xff skip until end of line, fill with 0
                v0 := 0
                loop while byteInLine < 16
                  decompressByteWrite
                again
                line += 1
                byteInLine := 0
                return
              end
              if v0 == 0xfe begin                                     # 0xfe n skip n bytes, fill with 0
                load v0
                count := v0
                source += 1
                dataByte := 0
                jump decompressCopyBytes
              end
              if v0 == 0xfd begin                                     # 0xfd n m skip n bytes, fill with m
                load v0
                count := v0
                load v0
                source += 2
                jump decompressCopyBytes
              end
              decompressByteWrite
              decompressByteCheckNewLine
              return
            }


:macro DecompressLevel source numLines {
              decompressLevelStart
              loop
                while TileDecoder.line != numLines+1
                i := source
                decompressLevelByte
              again
            }

:macro DisplayCompressedLevel leveladr numLines {
              TileDecoder.displayX = 0xff
              decompressLevelStart
              loop
                while TileDecoder.line <= numLines
                i := leveladr
                displayCompressedByte
              again
            }

:macro DisplayCompressedTile leveladr numLines tileX tileY {
              TileDecoder.displayX = tileX
              TileDecoder.displayY = tileY
              decompressLevelStart
              loop
                while TileDecoder.line <= numLines
				
                i := leveladr
                displayCompressedByte
				if TileDecoder.tilexy == 0 then
              again
            }

: displayCompressedByte
            with TileDecoder {
              i += source
              load v0
              source += 1
              if v0 == 0xff begin                                     # 0xff nothing to draw until end of line
                line += 1                                             # advance the line
                x := 0                                                # set position 0
                y += 8
                byteInLine := 0
                return
              end
              if v0 == 0xfe begin                                     # n bytes are 0
                load v0                                               # load count
                source += 1
                byteInLine += v0
                v0x8                                                  # multiply by 8
                x += v0                                               # 0xfe always is in the same line
                displayCompressedByteCheckLine
                return
              end
              if v0 == 0xfd begin
                load v0                                               # load count
                source += 1
                count := v0
                load v0
                source += 1
                  v0 -= 1
                  v0x8
                loop

                  while count > 0
                  drawTile
                  count -= 1
                again
                return
              end
              v0 -= 1
              v0x8

              drawTile
            }
            return

: displayCompressedByteCheckLine
            with TileDecoder {
              if x >= 128 begin
                byteInLine := 0
                x := 0
                y += 8
                line += 1
              end
            }
            return
: drawTile
            with TileDecoder {
              :log "Draw Title x=" x " y = " y " line=" line " byteInLine=" byteInLine + " dispX=" displayX " dispY = " displayY
              i := scenesprites
              i += v0
              if displayX == 0xff then jump drawTileDraw
              if byteInLine != displayX then jump drawTileSkip
              if line != displayY then jump drawTileSkip
			  tilexy := 1
: drawTileDraw
              sprite x TileDecoder.y 8
: drawTileSkip
              x += 8
              byteInLine += 1
              displayCompressedByteCheckLine
            }
            return



: DisplayLevel
            startDisplayLevel
            loop
              if v2 == 64 then return
              i := levelData
              displayLevelTile
            again


: main
            hires
            cls
            i := mylevel
            DisplayCompressedLevel mylevel 7

            DisplayCompressedTile mylevel 3 0 2
            DisplayCompressedTile mylevel 3 0 3
            DisplayCompressedTile mylevel 3 1 2
            DisplayCompressedTile mylevel 3 1 3

            loop
            again












: levelData
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00


#tileset 16x8
: mylevel
            0x01 0xff
            0x02 0xff
            0x07 0x08 0xfe 0x08 0x0c 0xfe 0x04 0x04
            0x09 0x0a 0xfe 0x0d 0x05
            0xfe 0x0c 0xfd 0x04 0x01
            0xfe 0x09 0x01 0x01 0x01 0xff
            0xfd 0x05 0x01 0x06 0xfe 0x06 0xfd 0x04 0x0b
            0xfe 0x06 0xfd 0x04 0x01 0xff
#end


#tiles 8x8
: scenesprites

: street
            0xaa 0x55 0xff 0xff 0x00 0x00 0x00 0x00

: streetSolid
            0xff 0xff 0xff 0xff 0x00 0x00 0x00 0x00

: streetChess
            0x55 0xaa 0x55 0xaa 0x00 0x00 0x00 0x00

: door1
            0x00 0x00 0x1f 0x10 0x10 0x10 0x10 0x10

: door2
            0x10 0x1c 0x14 0x10 0x10 0x10 0x10 0x1f
            0x00 0x00 0x00 0x00 0x92 0x54 0x28 0x10
            0x00 0x00 0x00 0x00 0x00 0x00 0xff 0x80
            0x00 0x00 0x00 0x00 0x00 0x00 0xff 0x01
            0xb5 0xa5 0xb5 0xa5 0xa7 0x80 0xff 0x00
            0x69 0x49 0x69 0x49 0x6d 0x01 0xff 0x00
            0x81 0x42 0x24 0x18 0x18 0x24 0x42 0x81
            0x00 0x00 0xc0 0xc2 0xc5 0xfd 0x05 0x02
            0x00 0x00 0x00 0x22 0x22 0x2a 0x2a 0x2a
            0x1f 0x20 0x7f 0x79 0x76 0x7f 0x7e 0x7d
            0xfe 0x06 0xfa 0xfa 0xfa 0x7a 0xfa 0xfa
            0x7d 0x7f 0x7d 0x7f 0x00 0x00 0x00 0x00
            0xfa 0xfa 0xfc 0xf8 0x00 0x00 0x00 0x00

: rocket
            0x01 0x03 0x03 0x07 0x07 0x07 0x07 0x07
            0x00 0x80 0x80 0xc0 0xc0 0xc0 0xc0 0xc0
            0x07 0x07 0x06 0x0c 0x0c 0x18 0x18 0x18
            0xc0 0xc0 0xc0 0x60 0x70 0x30 0x30 0x30
#end
