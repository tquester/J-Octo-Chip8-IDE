
#########################################################################################################
## Chip8 16bit Math library
## (C) Thomas Quester, 21.10.2023
##
## v0v1 = register 1
## v2v3 = register 2
## v4v5 = register 3
##
## Functions:
##   add16bit
##            v0v1 := v0v1 + v2v3
##   sub16bit
##            v0v1 := v0v1 - v2v3
##   mul16bit
##            v0v1 := v0v1 * v2v3   Destroys register
##   mul16bitClean
##            v0v1 := v0v1 * v2v3   Preserves registers (slower)
##   div16bit
##            v0v1 := v0v1 / v2v3   Destroys register
##   div16bitClean
##            v0v1 := v0v1 / v2v3   Preserves registers (slower)
##
##   dezBufToInt16
##            Reads a decimal number from a buffer. The buffer is 5 bytes long and contains numbers 0..9
##            Result in v0v1
##   printDez
##            prints the number in v0v1 in decimal at v4/v5 and avances the corrdinates
##
##   printhexv0v1
##            prints the number in v0v1 in hexadecimnal at v4/v5 and avances the corrdinates
##   printhexv0
##            prints the number in v0 in hexadecimal and advanced the position at v4/v5 and avances the corrdinates
#########################################################################################################





:const TestLibMath 0

:alias a1 v0
:alias a2 v1
:alias a3 v2
:alias b1 v3
:alias b2 v4
:alias b3 v5
:alias c1 v6
:alias c2 v7
:alias c3 v8
:alias counter v9
:alias temp va
:alias temp2 vb
:alias index vc
:alias d1 vd
:alias d2 ve
:alias d3 vb
:alias x v4
:alias y v5

            jump unittest




:if TestLibMath
:include "lib/libPrintHex24.8o"
: unittest
            hires

            v0 := 0
            v1 := 0
            i := math24coords
            save v1


            a1 := 0                                                # 1234567
            a2 := 0
            a3 := 10
            printhexv0v1v2
            printhexnewline
            x := 64
            y := 0
            printDez24



            b1 := 0x00
            b2 := 0x00
            b3 := 0x03                                                # 3
            printhexv3v4v5
            printhexnewline


            mul24bit
            printhexv0v1v2
            printhexnewline
            x := 64
            y := 8
            printDez24


            b1 := 0x00
            b2 := 0x00
            b3 := 0x03
# 3
            div24bit
            printhexv0v1v2
            printhexnewline

            x := 64
            y := 16
            printDez24


            loop
            again

: dezsample
            1 2 3 4 5


:stringmode textdigits "0123456789" {
:byte { 48 + VALUE }
            }
: testnum
            textdigits "1234"
            0


:end

######################################################################################
# sub16bit
# v0v1 := v0v1 + v2v3
######################################################################################
: add24bit
            a3 += b3
            a2 += vf
            a2 += b2
            a1 += vf
            a1 += b1
            return

######################################################################################
# sub16bit
# v0v1 := v0v1 - v2v3
######################################################################################

: sub24bit
            a3 -= b3
            if vf == 0 then a2 -= 1
            a2 -= b2
            if vf == 0 then a1 -= 1
            a1 -= b1
            return





: dez24
            temp := v0
            v0 := 0
            i := printbuf
            for temp2 := 0 to 7 save v0
            v0 := temp

            d1 := a1
            d2 := a2
            d3 := a3

            index := 7                                                # set Index to last digit
            loop
              if a1 == 0 begin
                if a2 == 0 begin
                  if a3 == 0 then jump dez24exit
                end
              end
              b1 := 0
              b2 := 0
              b3 := 10
              div24bit
              temp := v0
              v0 := c3
              i := printbuf
              i += index
              index -= 1
              save v0
              v0 := temp
            again
: dez24exit
            return

: printDez24Buf
            i := printbuf
            v1 := 0
            v2 := 0
            loop
              i := printbuf
              i += v1
              v1 += 1
              load v0
              if v0 != 0 then v2 := 1
              if v2 == 1 begin
                i := hex v0
                sprite x y 5
                x += 5
              end

              if v1 != 8 then
            again
            return

: printDez24
            i := mathsave
            save ve
            dez24
            i := mathsave
            load ve
            printDez24Buf
            i := mathsave
            load ve
            return


######################################################################################
# stringToInt16
#  Reads a decimal (ascii) encoded text
######################################################################################
: dezBufToInt24Mem
            0 0 0 0 0 0 0 0 0

: dezBufToInt24
            load v7
            i := dezBufToInt24Mem
            save v7

            counter := 0
            a1 := 0
            a2 := 0
            a3 := 0
            loop
              b1 := 0
              b2 := 0
              b3 := 10
              mul24bitClean
              temp := v0
              i := dezBufToInt24Mem
              i += counter
              load v0
              b1 := 0
              b2 := 0
              b3 := v0
              v0 := temp
              add24bit
              counter += 1
              if counter != 8 then
            again
            return


######################################################################################
# mul16bit
#     v1v2 := v1v2 * v2v3
#   Destroys v4 v5 v6 v7 v8
#
# mul16bitClean
#    v1v2 := v1v2 * v2v3
#    Preserves all other registers
######################################################################################


: mul24bitClean
            i := mathsave
            save ve
            mul24bit
            i := mathsave
            save v2
            i := mathsave
            load ve
            return

: mul24bit
            c1 := 0
            c2 := 0
            c3 := 0
            counter := 24
            loop

              c3 <<= c3                                               # 24 bit shift c3 c2 c1
              temp2 := vf
              c2 <<= c2
              temp := vf
              c2 += temp2
              c1 <<= c1
              temp2 := vf
              c1 += temp


              b3 <<= b3                                               # 24bit shift b3 b2 b1
              temp2 := vf
              b2 <<= b2                                               # shift 1 bit out at the left side
              temp := vf
              b2 += temp2
              b1 <<= b1
              temp2 := vf
              b1 += temp

              if temp2 == 1 begin
                c3 += a3
                c2 += vf
                c2 += a2
                c1 += vf
                c1 += a1
              end
              counter -= 1
              if counter > 0 then
            again
            a1 := c1
            a2 := c2
            a3 := c3
            return



# v0v1 := v0v1 / v2v3
# v4v5 := v0v1 mod v2v3
: div24bit
            c1 := 0
            c2 := 0
            c3 := 0

            counter = 24
            loop
              c3 <<= c3
              temp2 := vf
              c2 <<= c2                                               # shift left c
              temp := vf
              c2 += temp2
              c1 <<= c1
              c1 += temp


              a3 <<= a3
              temp2 := vf
              a2 <<= a2                                               # shift left a, store carry bit in temp2
              temp := vf
              a2 += temp2
              a1 <<= a1

              c3 += vf                                                # Add Carrybit to c (since we shifted, bit0 in c3 is 0)
              a1 += temp

              if c1 > b1 begin
                div24bitsub
              else
                if c1 == b1 begin
                  if c2 > b2 begin
                    div24bitsub
                  else
                    if c2 == b2 begin
                      if c3 >= b3 then div24bitsub
                    end
                  end
                end
              end




              counter -= 1
              if counter != 0 then
            again
            return

: div24bitsub

            c3 -= b3
            if vf == 0 then c2 -= 1
            c2 -= b2
            if vf == 0 then c1 -= 1
            c1 -= b1
            a3 += 1
            return


: mathsave
            0 0 0 0
            0 0 0 0
            0 0 0 0
            0 0 0 0



: mul16bitsave
            0 0

: printbuf 0 0 0 0 0 0 0
:unalias a1 a2 b1 b2 c1 c2 counter temp temp2 x y
