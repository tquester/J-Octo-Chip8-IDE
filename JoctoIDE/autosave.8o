# bouncing ball

:const OCTO_KEY_Q 4
:const OCTO_KEY_W 5
:const OCTO_KEY_E 6
:const OCTO_KEY_R 0xD

:const OCTO_KEY_A 7
:const OCTO_KEY_S 8
:const OCTO_KEY_D 9
:const OCTO_KEY_F 0xE

:const rocketCount 10
:const ballCount 10

:struct Coords {
              x                                                       # v0
              y                                                       # v1
            }

:struct CoordsDir extends Coords {
              dx
              dy
            }

:struct Balldata extends CoordsDir {
              living                                                  # v4
            }

:struct BalldataOfs extends Balldata {
              ballofs                                                 # v5
            }

:struct Player extends CoordsDir {
              index                                                   # v4
            }

:struct Rocket extends CoordsDir {
              shooting                                                # v4 0 = free slot, 1 = shooting
            }





            gameLoop



:function gameLoop {
              var BalldataOfs
              var temp
              var ballindex
              hires
              initBalls
              for ballofs = 0 to (ballCount - 1) * Balldata.length step Balldata.length begin
                initDrawBall
              end
              initDrawPlayer
              loop
                for ballofs = 0 to (ballCount - 1) * Balldata.length step Balldata.length begin
                  moveBall
                  movePlayer
                  moveRocket
                end
              again
            }

:function initDrawPlayer {
              var Player
              i := player
              load Player
              i := planes
              i += index
              sprite x y 8
              return
            }


:function movePlayer {
              var Player
              var moved
              var savex
              var savey
              var saveindex

              i := savedata
              save var

              i := player
              load Player
              savex := x
              savey := y
              saveindex := index

              switch key begin
                case OCTO_KEY_A begin
                  if x > 0 begin
                    x -= 1
                    moved := 1
                    index := 3 * 8
                  end
                end
                case OCTO_KEY_D begin
                  if x < 128 - 8 begin
                    x += 1
                    moved := 1
                    index := 2 * 8
                  end
                end
                case OCTO_KEY_W begin
                  if y > 0 begin
                    y -= 1
                    moved := 1
                    index := 0 * 8
                  end
                end
                case OCTO_KEY_S begin
                  if y < 64 - 8 begin
                    y += 1
                    moved := 1
                    index := 1 * 8
                  end
                end
                case OCTO_KEY_F begin
                  shoot
                  loop
                    vf := OCTO_KEY_F
                    if vf key then
                  again

                end
              end
              if moved == 1 begin
                i := planes
                i += saveindex
                sprite savex savey 8
                i := planes
                i += index
                sprite x y 8
                i := player
                save Player
              end
              i := savedata
              load var
              return
: savedata
              var.byte
            }

:function test {
: waitkey
              vf := OCTO_KEY_F
              if vf -key then jump waitkey

              loop
                vf := OCTO_KEY_F
                if vf key then
              again

              v0 := 0
              loop
                while v0 < 100
                v0 += 1
              again

for v0 := 0 to 99 begin

end

            }

:function shoot {
              var Rocket
              var index = ve
              var tempindex = vd
              i := savedata
              save var

              for index = 0 to rocketCount * Rocket.length step Rocket.length begin
                i := rocketData
                i += index
                load Rocket
                if shooting == 0 begin
                  i := player
                  load Player

                  with Player begin
                    tempindex = index
                  end

                  shooting := 1
                  switch tempindex begin
                    case 0 begin
                      dx := 0
                      dy := -1
                      y -= 4
                    end
                    case 1 * 8 begin
                      dx := 0
                      dy := 1
                      y += 8
                    end
                    case 2 * 8 begin
                      dx := 1
                      dy := 0
                      x += 8
                      y += 2
                    end
                    case 3 * 8 begin
                      dx := -1
                      dy := 0
                      x -= 8
                      y += 2
                    end
                  end

                  i := rocketData
                  i += index
                  save Rocket
                  i := rocketData
                  i += index
                  drawRocket
                  jump exitfor
                end
              end
: exitfor
              i := savedata
              load var


              return
: savedata
              var.byte

            }

:function moveRocket {
              var Rocket
              var index
              var savex
              var savey
              i := savedata
              save var
              for index = 0 to rocketCount * Rocket.length step Rocket.length begin
                i := rocketData
                i += index
                load Rocket
                if shooting == 1 begin

                  savex := x
                  savey := y
                  x += dx
                  y += dy
                  if x < 0 then jump endShoot
                  if x > 128 - 8 then jump endShoot
                  if y < 0 then jump endShoot
                  if y > 64 - 8 then jump endShoot
                  i := rocket
                  sprite savex savey 3
                  i := rocket
                  sprite x y 3
                  if vf == 1 then checkRocketCollision
: moveRocketNext
                  i := rocketData
                  i += index
                  save Rocket
                end

              end
              i := savedata
              load var

              return
: endShoot
              i := rocket
              sprite savex savey 3
              shooting = 0
              jump moveRocketNext
: savedata
              var.byte

            }

:function checkRocketCollision {
              var Balldata
              var index
              var minx
              var maxx
              var miny
              var maxy
              i := savedata
              save var
              minx := x
              maxx := x
              miny := y
              maxy := y
              minx -= 8
              maxx += 8
              miny -= 8
              maxy += 8
              for index := 0 to ( ballCount - 1) * Balldata.length step Balldata.length begin
                i := ball1
                i += index
                load Balldata
                if living == 1 begin
                  if x >= minx begin
                    if x <= maxx begin
                      if y >= miny begin
                        if y <= maxy begin
                          living := 0
                          i := ball1
                          i += index
                          save Balldata
                          i := ball
                          sprite x y 8
                        end
                      end
                    end
                  end
                end
              end

              i := savedata
              load var
              return
: savedata
              var.byte
            }







:function drawRocket {
              var Rocket
              load Rocket
              i := rocket
              sprite x y 3
              return
            }




:function ballCallback {
              var BalldataOfs
              i :=  ball1
              i += ballofs
              return
            }




:function initDrawBall {
              var BalldataOfs
              i := ball1
              i += ballofs
              load Balldata
              i := ball
              sprite x y 8
              return
            }

:macro neg reg {
              vf := reg
              reg := 0
              reg -= vf
            }


:function initBalls {
              var Balldata
              var index

              for index = 0 to (ballCount - 1) * Balldata.length step Balldata.length begin
                x := rnd 127
                y := rnd 63
                if x > 128 -8 then x = 128 -8
                if y > 64 - 8 then y = 64 - 8
                dx := rnd 3
                dx += 1
                if dx > 1 begin
                  neg dx
                end
                dy := rnd 3
                dy += 1
                if dy > 1 begin
                  neg dy
                end
                living := 1
                i := ball1
                i += index
                save Balldata

              end
              return
            }

:function moveBall {
              var BalldataOfs
              var temp
              var savex
              var savey
              i := savedata
              save var
              i := ball1
              i += ballofs
              load Balldata
              if living == 1 begin
                i := ball
                savex := x
                savey := y
                x += dx
                y += dy
                if x < 0 then negx
                if x > 128 - 8 then negx
                if y < 0 then negy
                if y > 64 - 8 then negy
                sprite savex savey 8
                sprite x y 8
                if vf == 1 begin
                  sprite x y 8
                  negx
                  negy

                  sprite x y 8
                end
                i := ball1
                i += ballofs
                save Balldata
              end
              i := savedata
              load var
              return

: negx
              vf := dx
              dx = 0
              dx -= vf
              x += dx
              return

: negy
              vf := dy
              dy = 0
              dy -= vf
              y += dy
              return
: savedata
              var.byte

            }

: ball1
            Balldata.byte[ballCount]

: ballend

: player
            Player.byte {
              x = 30
              y = 30
              index=0
            }

: rocketData
            Rocket.byte[rocketCount]


:sprite rocket, 8,3 {
              0x24 0x18 0x24
            }





# Defines the sprite, so that the sprie editor can find it automatically

:sprite ball, 8,8 {
# Sprite 1
              0x00 0x18 0x3c 0x6e 0x7e 0x3c 0x18 0x0
            }


:sprite planes, 8,8 {
              0x00 0x18 0x7e 0xff 0x18 0x18 0x3c 0x18
              0x00 0x18 0x3c 0x18 0x18 0xff 0x7e 0x18
              0x04 0x06 0x26 0x7f 0x7f 0x26 0x06 0x04
              0x10 0x30 0x32 0x7f 0x7f 0x32 0x30 0x10
            }
