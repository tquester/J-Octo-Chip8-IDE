:const testLibStd 1

# Parameter for printDez
:struct PrintDez8 {
              number                                                  # v0 The number to be displayed
              digits                                                  # v1 The number of digits (1,2 or 3)
              x                                                       # v2 x position
              y                                                       # v3 y position
            }


:struct Plot {
              x0
              y0
            }

:struct Rect extends Plot {
              x1
              y1
            }






:if testLibStd
            testMultPrint
loop again
:end

:function testMultPrint {
              var PrintDez8
              var temp1 temp2


              temp1 := 17
              temp2 := 9

              number := temp1
              x := 15
              y := 5
              digits := 3
              printDez8

              number := temp2
              x := 15
              y += 8
              printDez8

              i := spriteMal
              x := 5
              sprite x y 5

              i := spriteGleich
              x := 5
              y += 8

              sprite x y 5

              x := 15
              y -= 8


              v0 := temp1
              v1 := temp2
              mul8bitClean
              number := v0
              digits := 3
              y += 8
              printDez8
              with Rect begin
                x0 := 0
                y0 := 0
                x1 := 30
                y1 := 30

                drawRectangle
              end


              return
: spriteMal
              0x88 0x50 0x20 0x50 0x88
: spriteGleich
              0x00 0xf8 0x00 0xf8 0x00
            }

####################################################################################################
## Graphics section
####################################################################################################


####################################################################################################
## Plot. Draws a pixel
## Parametes: Plot
####################################################################################################

:function plot  {
# draws a point at v0/v1
              i := spritePixel
              sprite Plot.x0 Plot.y0 1
              return

: spritePixel
              0x80

            }

:function drawLine {
####################################################################################################
## Plot. Draws a pixel
## Parametes: Line
####################################################################################################

              var Rect
              var dx
              var dy
              var d0
              var d1

# pseudocode (wikipedia) https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm
# plotLine(x0, y0, x1, y1)
#    dx = x1 - x0
#    dy = y1 - y0
#    D = 2*dy - dx
#    y = y0
#
#
#    for x from x0 to x1
#        plot(x, y)
#        if D > 0
#            y = y + 1
#            D = D - 2*dx
#        end if
#        D = D + 2*dy
# D is calculated with 16bit additon/subtraction, so wie use d0/d1 for D

              var temp
              i := buf
              save var

              if x0 == x1 begin
                for y0 = y0 to y1 plot
              else
                dx := x1                                              # dx = x1 - x0
                dx -= x0
                dy := y1                                              # dy = y1 - y0
                dy -= y0                                              # y = y0
                d0 := dy                                              # D = 2*dy - dx
                d0 += d0
                d0 -= dx
                for x0 = x0 to x1 begin
                  plot
                  if d1 > 0 begin
                    y0 += 1                                           # y = y + 1
                    temp = dx
                    temp += temp
                    d0 -= temp
                    if vf == 1 then d1 -= 1
                  end
                  temp = dy
                  temp += temp
                  d0 += temp
                  d1 += vf
                end
              end

              i := buf
              load var
              return
: buf         var.byte
            }

:function drawRectangle {
####################################################################################################
## drawRectangle. Draws a rectangle
## Parametes: Rect
####################################################################################################

              var Rect
              var xa
              var ya
              var xb
              var yb

              i := buf
# save var
              xa := x0
              xb := x1
              ya := y0
              yb := y1
              for x0 = xa to xb begin
                y0 := ya
                plot
                y0 := yb
                plot
              end
              x0 := xa

              if ya < yb begin
                y0 := ya
                y0 += 1
                y1 := yb
                y1 -= 1
              else
                y0 := yb
                y0 += 1
                y1 := ya
                y1 -= 1
              end


              for y0 = y0 to y1 begin
                x0 := xa
                plot
                x0 := xb
                plot
              end

              i := buf
              load var
              return
: buf         var.byte
            }


####################################################################################################
## printDez8. Prints a decimal number at position x,y with a given amount of digits.
## Parameter: PrintDez
## Destorys: nothing
####################################################################################################


:struct PrintDezVar extends PrintDez8 {
              newx
              newy
              newdigits
            }



:function printDez8 {
              var PrintDezVar

              i := dezsave
              save var

              newx := x
              newy := y
              newdigits := digits

              i := dezbuf
              bcd number
              load v2

              if newdigits == 3 then printHex
              if newdigits >= 2 begin
                v0 := v1
                printHex
              end
              v0 := v2
              printHex
              i := dezsave
              load newdigits
              return

: dezbuf
              var.byte



: dezsave
              PrintDezVar.byte

            }

:function printHex {
              with PrintDezVar {
                i := hex v0
                sprite newx newy 5
                newx += 5
              }
              return
            }


:function mul8bitClean {
######################################################################################
# mul8bitClean
#   v0 := v0 * v1
#   Preserves all variables
######################################################################################

              i := mathsave
              save v3
              mul8bit
              i := mathsave
              save v0
              i := mathsave
              load v3
              return
            }

:function mul8bit {
######################################################################################
# mul8bit  Multply
#     v0 := v0 * v1
#     Destroys v1, v2, v3
######################################################################################
              var result                                              # v0
              var param                                               # v1
              var sum                                                 # v2
              var counter                                             # v3
              var alsoTheCounter = counter                            # v3
              var anotherAliasTocounter = v3
              sum := 0
              counter := 8
              loop
                sum += sum
                param <<= param
                if vf == 1 begin
                  sum += result
                  param += 1
                end
                counter -= 1
                if counter != 0 then
              again
              result := sum
              return
            }


:function div8clean {
######################################################################################
# div8bit
#    v0 := v0 / v1
#    Destroys v3 v4
#
# div8bitclean
#    v0 := v0 / v1
#    Preserves all registers
#
# div16bit
#  v0v1 := v0v1 / v2v3
#  v3v4 := v0v1 mod v2v3
#  Destroys: v4 v5 v6 v7 v8
######################################################################################

              i := mathsave
              save v3
              div8bit
              i := mathsave
              save v0
              i := mathsave
              load v3
              return
            }



:function div8bit {
              v2 := 0                                                 # xor a
              v3 := 8                                                 # ld b,8

              loop
                v2 += v2                                              # add hl, hl, rla,
                v0 <<= v0
                v2 += vf
                if v2 >= v1 begin                                     # if v1 fits into vd
                  v2 -= v1                                            # subtract
                  v0 += 1                                             # and set the leftmost bit in vd
                end
                v3 -= 1
                if v3 != 0 then
              again
              return
            }



: mathsave
            0 0 0 0
