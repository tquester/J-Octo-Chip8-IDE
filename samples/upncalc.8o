
            jump start
:include "lib/libText.8o"
:include "lib/libMath.8o"
:include "lib/libStack.8o"

: textbase
: txtCellPhones2  tinytext8 "cell phones!#"
: txtline0 tinytext8 "UPN-Calculator#"
: txtline1 tinytext8 "1=1 2=2 3=3 4=+#"
: txtline2 tinytext8 "Q=4 W=5 E=6 R=-#"
: txtline3 tinytext8 "A=7 S=8 D=9#"
: txtline4 tinytext8 "Z=* X=0 C=/#"
: txtline5 tinytext8 "F=Enter#"
: txtline6 tinytext8 "V=Clear#"
: txtstack tinytext8 "Stack#"

:const digits 8

:struct bnvars {
              accu
              stackptr

            }


: inputdata 0 0 0 0 0 0 0 0
: inputpos  0



: stackptr 8


:struct PrintNumberVars {
              digit
              x
              y
              count
              ofs
            }





: title
            Tinytext 54 0 txtline0
            Tinytext 54 8 txtline1
            Tinytext 54 16 txtline2
            Tinytext 54 24 txtline3
            Tinytext 54 32 txtline4
            Tinytext 54 40 txtline5
            Tinytext 54 48 txtline6
            Tinytext 0  8  txtstack
            return




: clearInput
            v0 := 0
            v1 := 0
            v2 := 0
            v3 := 0
            v4 := 0
            i := inputdata
            save v4
            return


: addDigit
            v9 := v0
            showCursor
            i := inputdata
            load v4
            v0 := v1
            v1 := v2
            v2 := v3
            v3 := v4
            v4 := v9
            i := inputdata
            save v5
            showCursor
            ret

: clearInput
            v0 := 0
            v1 := 0
            v2 := 0
            v3 := 0
            v4 := 0
            i := inputdata
            save v4
            return


:struct ShowCursorVar {
              digit
              x
              y
              pos
              cursorpos
            }
: showCursor
            with ShowCursorVar begin
              x = 0
              y = 0
              i := inputpos
              load v0
              cursorpos := v0
              for pos = 0 to 5 begin
                i := inputdata
                i += pos
                load digit
                if v0 == 15 begin
                  if pos == cursorpos begin
                    i := spriteBlock
                  else
                    i := spriteEmpty
                  end
                else
                  i := hex v0
                end
                sprite x y 5
                x += 5
              end
            end
            return
            return

:macro printStackEntry num {
              v0 := num
              call printUpnEntry
            }

: printUpnEntry
            v4 := 0
            v5 := 16
            call stackPrintBottom
            return


: processKeyboard
            loop
: nextkey
              v0 := key

              if v0 < 10 begin
                addDigit
                jump nextkey
              end
              switch v0 begin
                case 0xC begin                                        # 4 = plus
                  i := stackptr
                  load v0
                  if v0 > 3 begin
                    printStackEntry 0
                    printStackEntry 1
                    stackAdd
                    printStackEntry 0
                  end
                end
                case 0xd begin                                        # D = minus
                  printStackEntry 0
                  printStackEntry 1
                  stackSub
                  printStackEntry 0
                end
                case 0xa begin                                        # D = mult
                  printStackEntry 0
                  printStackEntry 1
                  stackMul
                  printStackEntry 0
                end
                case 0xb begin                                        # D = mult
                  printStackEntry 0
                  printStackEntry 1
                  stackDiv
                  printStackEntry 0
                end
                case 0xe begin                                        # e = enter
                  i := inputdata
                  dezBufToInt16
                  stackPush
                  showCursor
                  clearInput
                  showCursor
                  printStackEntry 0
                end
                case 0xf begin                                        # f = clear
                  clearInput
                  stackClear
                  printScreen
                end
              end

            again



: start
            hires
            stackClear

            printScreen
            processKeyboard



: printScreen
            clear
            v4 := 0
            v5 := 16

            stackPrint
            title
            showCursor
            return


:sprites images, 8,5 {
: spriteBlock
              0xf8 0x88 0x88 0x88 0xf8
: spriteEmpty
              0x00 0x00 0x00 0x00 0xf8
            }
