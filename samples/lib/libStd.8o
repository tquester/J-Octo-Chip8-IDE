:const testLibStd 1

:struct PrintDez8 {
              number                                                  # v0 The number to be displayed
              digits                                                  # v1 The number of digits (1,2 or 3)
              x                                                       # v2 x position
              y                                                       # v3 y position
            }

:struct PrintDezVar extends PrintDez8 {
              newx
              newy
              newdigits
            }



:if testLibStd
            testMultPrint
loop again
:end

:function testMultPrint {
              var PrintDez8
              var temp1 temp2


              temp1 := 17
              temp2 := 9

              number := temp1
              x := 10
              y := 0
              digits := 3
              printDez8

              number := temp2
              y += 8
              printDez8

              i := spriteMal
              x := 0
              sprite x y 5
              x := 10

              i := spriteGleich
              x := 0
              y += 8

              sprite x y 5
              x := 10
              y -= 8


              v0 := temp1
              v1 := temp2
              mul8bitClean
              number := v0
              digits := 3
              y += 8
              printDez8

              v1 := y
              v1 += 8
              for v0 = 0 to 32 plot
              return
: spriteMal
              0x88 0x50 0x20 0x50 0x88
: spriteGleich
              0x00 0xf8 0x00 0xf8 0x00
            }

:function plot  {
# draws a point at v0/v1
              i := spritePixel
              sprite v0 v1 1
              return

: spritePixel
              0x80

            }









: dezsave
            PrintDezVar.byte

:function printDez8 {
              var PrintDezVar

              i := dezsave
              save newdigits

              newx := x
              newy := y
              newdigits := digits

              i := dezbuf
              bcd number
              load v2

              if newdigits == 3 then printHex
              if newdigits >= 2 begin
                v0 := v1
                printHex
              end
              v0 := v2
              printHex
              i := dezsave
              load newdigits
              return

: dezbuf 0 0 0

            }

:function printHex {
              with PrintDezVar {
                i := hex v0
                sprite newx newy 5
                newx += 5
              }
              return
            }


:function mul8bitClean {
######################################################################################
# mul8bitClean
#   v0 := v0 * v1
#   Preserves all variables
######################################################################################

              i := mathsave
              save v3
              mul8bit
              i := mathsave
              save v0
              i := mathsave
              load v3
              return
            }

:function mul8bit {
######################################################################################
# mul8bit  Multply
#     v0 := v0 * v1
#     Destroys v1, v2, v3
######################################################################################
              var result                                              # v0
              var param                                               # v1
              var sum                                                 # v2
              var counter                                             # v3
              var alsoTheCounter = counter                            # v3
              var anotherAliasTocounter = v3
              sum := 0
              counter := 8
              loop
                sum += sum
                param <<= param
                if vf == 1 begin
                  sum += result
                  param += 1
                end
                counter -= 1
                if counter != 0 then
              again
              result := sum
              return
            }


:function div8clean {
######################################################################################
# div8bit
#    v0 := v0 / v1
#    Destroys v3 v4
#
# div8bitclean
#    v0 := v0 / v1
#    Preserves all registers
#
# div16bit
#  v0v1 := v0v1 / v2v3
#  v3v4 := v0v1 mod v2v3
#  Destroys: v4 v5 v6 v7 v8
######################################################################################

              i := mathsave
              save v3
              div8bit
              i := mathsave
              save v0
              i := mathsave
              load v3
              return
            }



:function div8bit {
              v2 := 0                                                 # xor a
              v3 := 8                                                 # ld b,8

              loop
                v2 += v2                                              # add hl, hl, rla,
                v0 <<= v0
                v2 += vf
                if v2 >= v1 begin                                     # if v1 fits into vd
                  v2 -= v1                                            # subtract
                  v0 += 1                                             # and set the leftmost bit in vd
                end
                v3 -= 1
                if v3 != 0 then
              again
              return
            }



: mathsave
            0 0 0 0
